{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Guide For TRON brief information, please check out TRON Overview For TRON virtual machine information, please check out TRON Virtual Machine For TRON http api, please check out TRON Http Api For TRON RPC api, please check out TRON RPC Api For TRON official public nodes ip, please check out TRON Official Public Nodes For TRON node deployment, please check out TRON Deployment For TRON shielded transaction, please check out TRON Shieled Transaction Tips Guide TRON Wallet Proposal TRON Token Standard TRON Event Subscription Model Design of TRON account TRON Account Multi-Signature TRON Adaptive Energy Limit Model TRC-20 Token Standard Implement of DB storage with RocksDB Built-in Message Queue in Event Subscription Model To Support Contract without ABI in Event Subscription Model Getting Started as TRON Community Developers TRON is a global, open-source platform for decentralized applications. Thank you for considering to help out with the source code! We welcome contributions from anyone on the internet, and are grateful for even the smallest of fixes! GitHub is used to track issues and contribute code, suggestions, feature requests or documentation. If you'd like to contribute to TRON, please fork, fix, commit and send a pull request (PR) for the maintainers to review and merge into the main base. If you wish to submit more complex changes though, please check up with the core developers first on our channel to ensure those changes are in line with the general philosophy of the project and/or get some early feedback which can make both your efforts much lighter as well as our review and merge procedures quick and simple. Your PR will be reviewed according to the Code Review Guidelines. We encourage a PR early approach, meaning you create the PR the earliest even without the fix/feature. This will let core developers and other volunteers know you picked up an issue. These early PRs should indicate 'in progress' status. Developer Community Discord Gitter How to Contribute to TRON Documentation There are two documentation repositories: documentation-EN is the English version. documentation-ZH is the Chinese version. We use MkDocs to build documentation project. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can edit or add a documentation file in /docs/ folder. How to Submit a TIP TRON Improvement Proposals (TIPs) describe standards for the TRON platform, including core protocol specifications, client APIs, and contract standards. The TIPS repository is https://github.com/tronprotocol/TIPs Your first PR should be a first draft of the final TIP. It must meet the formatting criteria enforced by the build (largely, correct metadata in the header). An editor will manually review the first PR for a new TIP and assign it a number before merging it. Make sure you include a discussions-to header with the URL to a discussion forum or open GitHub issue where people can discuss the TIP as a whole. Please refer to the TIP template How to Contribute to java-tron Branch Introduction master branch: This branch contains the latest code released to the production environment. It can only be merged, and can not be modified directly in this branch. develop branch: This branch is the main development branch. It contains the complete code that is going to release. It can only be merged, and can not be modified directly in this branch. feature branch: This branch is used to develop new features. It is created based on develop branch. Once the development is finished, it should be merged into develop branch, and then delete the branch. release branch: This is the branch that is going to be released. It is created based on develop branch. In this branch, small fix and modification of final version of metadata is allowed. When the code is released, this branch should be merged into master branch(tag needed) and develop branch. The final test before release uses this branch. hotfix branch: This branch is used to fix a bug when an online bug is found. It is created based on master branch. When bug fix is done, it should be merged into master branch(as a new release) and develop and then delete the branch. branch. Writing a new feature: When you start to develop a new feature, please create a feature branch from develop branch under origin/feature . $ git checkout -b feature/my-feature develop # switch to 'feature/my-feature' When you finish the development, the new feature should be merged into develop branch. $ git commit -m description # submit the code $ git checkout develop # switch to 'develop' $ git pull # update branch $ git checkout feature/my-feature # switch to 'feature/my-feature' $ git merge develop # merge 'develop', need to fix the conflict $ git push # submit to GitHub # make a Pull Request to wait the core developers to check $ git branch -d feature/my-feature # once it is merged, delete 'feature/my-feature' Fixing online bugs: When you start to fix an online bug, please create a hotfix branch from master branch under origin/hotfix . $ git checkout -b hotfix/my-hotfix master # switch to 'hotfix/my-hotfix' $ git commit -a -m Bumped version number to 3.1.4 # submit and modify the version number When you finish the fix, it should be merged into master branch and develop branch. $ git commit -m description # submit the code $ git checkout master # switch to 'master' $ git pull # update branch $ git checkout hotfix/my-hotfix # switch to 'hotfix/my-hotfix' $ git merge master # merge 'master', need to fix the conflict $ git push # make a Pull Request to wait the core developers to check # tag 'master' $ git checkout develop # switch to 'develop' $ git pull # update branch $ git checkout hotfix/my-hotfix # switch to 'hotfix/my-hotfix' $ git merge develop # merge 'develop', need to fix the conflict $ git push # make a Pull Request to wait the core developers to check $ git branch -d hotfix/my-hotfix # once it is merged, delete 'my-hotfix' Your commit messages should detail why you made your change in addition to what you did (unless it is a tiny change). Finally, please make a PR. Additionally, if you are writing a new feature, please ensure you add appropriate test cases under /src/test .","title":"Home"},{"location":"#documentation-guide","text":"For TRON brief information, please check out TRON Overview For TRON virtual machine information, please check out TRON Virtual Machine For TRON http api, please check out TRON Http Api For TRON RPC api, please check out TRON RPC Api For TRON official public nodes ip, please check out TRON Official Public Nodes For TRON node deployment, please check out TRON Deployment For TRON shielded transaction, please check out TRON Shieled Transaction","title":"Documentation Guide"},{"location":"#tips-guide","text":"TRON Wallet Proposal TRON Token Standard TRON Event Subscription Model Design of TRON account TRON Account Multi-Signature TRON Adaptive Energy Limit Model TRC-20 Token Standard Implement of DB storage with RocksDB Built-in Message Queue in Event Subscription Model To Support Contract without ABI in Event Subscription Model","title":"Tips Guide"},{"location":"#getting-started-as-tron-community-developers","text":"TRON is a global, open-source platform for decentralized applications. Thank you for considering to help out with the source code! We welcome contributions from anyone on the internet, and are grateful for even the smallest of fixes! GitHub is used to track issues and contribute code, suggestions, feature requests or documentation. If you'd like to contribute to TRON, please fork, fix, commit and send a pull request (PR) for the maintainers to review and merge into the main base. If you wish to submit more complex changes though, please check up with the core developers first on our channel to ensure those changes are in line with the general philosophy of the project and/or get some early feedback which can make both your efforts much lighter as well as our review and merge procedures quick and simple. Your PR will be reviewed according to the Code Review Guidelines. We encourage a PR early approach, meaning you create the PR the earliest even without the fix/feature. This will let core developers and other volunteers know you picked up an issue. These early PRs should indicate 'in progress' status. Developer Community Discord Gitter","title":"Getting Started as TRON Community Developers"},{"location":"#how-to-contribute-to-tron-documentation","text":"There are two documentation repositories: documentation-EN is the English version. documentation-ZH is the Chinese version. We use MkDocs to build documentation project. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can edit or add a documentation file in /docs/ folder.","title":"How to Contribute to TRON Documentation"},{"location":"#how-to-submit-a-tip","text":"TRON Improvement Proposals (TIPs) describe standards for the TRON platform, including core protocol specifications, client APIs, and contract standards. The TIPS repository is https://github.com/tronprotocol/TIPs Your first PR should be a first draft of the final TIP. It must meet the formatting criteria enforced by the build (largely, correct metadata in the header). An editor will manually review the first PR for a new TIP and assign it a number before merging it. Make sure you include a discussions-to header with the URL to a discussion forum or open GitHub issue where people can discuss the TIP as a whole. Please refer to the TIP template","title":"How to Submit a TIP"},{"location":"#how-to-contribute-to-java-tron","text":"Branch Introduction master branch: This branch contains the latest code released to the production environment. It can only be merged, and can not be modified directly in this branch. develop branch: This branch is the main development branch. It contains the complete code that is going to release. It can only be merged, and can not be modified directly in this branch. feature branch: This branch is used to develop new features. It is created based on develop branch. Once the development is finished, it should be merged into develop branch, and then delete the branch. release branch: This is the branch that is going to be released. It is created based on develop branch. In this branch, small fix and modification of final version of metadata is allowed. When the code is released, this branch should be merged into master branch(tag needed) and develop branch. The final test before release uses this branch. hotfix branch: This branch is used to fix a bug when an online bug is found. It is created based on master branch. When bug fix is done, it should be merged into master branch(as a new release) and develop and then delete the branch. branch. Writing a new feature: When you start to develop a new feature, please create a feature branch from develop branch under origin/feature . $ git checkout -b feature/my-feature develop # switch to 'feature/my-feature' When you finish the development, the new feature should be merged into develop branch. $ git commit -m description # submit the code $ git checkout develop # switch to 'develop' $ git pull # update branch $ git checkout feature/my-feature # switch to 'feature/my-feature' $ git merge develop # merge 'develop', need to fix the conflict $ git push # submit to GitHub # make a Pull Request to wait the core developers to check $ git branch -d feature/my-feature # once it is merged, delete 'feature/my-feature' Fixing online bugs: When you start to fix an online bug, please create a hotfix branch from master branch under origin/hotfix . $ git checkout -b hotfix/my-hotfix master # switch to 'hotfix/my-hotfix' $ git commit -a -m Bumped version number to 3.1.4 # submit and modify the version number When you finish the fix, it should be merged into master branch and develop branch. $ git commit -m description # submit the code $ git checkout master # switch to 'master' $ git pull # update branch $ git checkout hotfix/my-hotfix # switch to 'hotfix/my-hotfix' $ git merge master # merge 'master', need to fix the conflict $ git push # make a Pull Request to wait the core developers to check # tag 'master' $ git checkout develop # switch to 'develop' $ git pull # update branch $ git checkout hotfix/my-hotfix # switch to 'hotfix/my-hotfix' $ git merge develop # merge 'develop', need to fix the conflict $ git push # make a Pull Request to wait the core developers to check $ git branch -d hotfix/my-hotfix # once it is merged, delete 'my-hotfix' Your commit messages should detail why you made your change in addition to what you did (unless it is a tiny change). Finally, please make a PR. Additionally, if you are writing a new feature, please ensure you add appropriate test cases under /src/test .","title":"How to Contribute to java-tron"},{"location":"SolidityNode&FullNode_Deployment/","text":"Premise Create separate directories for fullnode and soliditynode /deploy/fullnode /deploy/soliditynode Create two folders for fullnode and soliditynode. Clone the latest master branch of https://github.com/tronprotocol/java-tron and extract it to /deploy/java-tron Make sure you have the proper dependencies. JDK 1.8 (JDK 1.9+ is not supported yet) On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8 , instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8 , you will get Build Failed result. Open UDP ports for connection to the network MINIMUM 2 CPU Cores Deployment Guide 1. Build the java-tron project cd /deploy/java-tron ./gradlew build 2. Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories download your needed configuration file from https://github.com/tronprotocol/TronDeployment. main_net_config.conf is the configuration for MainNet, and test_net_config.conf is the configuration for TestNet. please rename the configuration file to `config.conf` and use this config.conf to start FullNode and SoliditNode. cp build/libs/FullNode.jar ../fullnode cp build/libs/SolidityNode.jar ../soliditynode 3. You can now run your FullNode using the following command java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 4. Configure the SolidityNode configuration file You need to edit config.conf to connect to your local FullNode. Change trustNode in node to local 127.0.0.1:50051 , which is the default rpc port. Set listen.port to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change rpc port to 50052 or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. rpc { port = 50052 } 5. You can now run your SolidityNode using the following command\uff1a java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 6. Running a Super Representative Node for mainnet java -jar FullNode.jar -p your private key --witness -c your config.conf(Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf This is similar to running a private testnet, except that the IPs in the config.conf are officially declared by TRON. 7. Running a Super Representative Node for private testnet You should modify the config.conf: Replace existing entry in genesis.block.witnesses with your address Replace existing entry in seed.node ip.list with your ip list The first Super Node start, needSyncCheck should be set false Set p2pversion to 61 cd build/libs java -jar FullNode.jar -p your private key --witness -c your config.conf (Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf Logging and Network Connection Verification Logs for both nodes are located in /deploy/\\*/logs/tron.log . Use tail -f /logs/tron.log/ to follow along with the block syncing. You should see something similar to this in your logs for block synchronization: FullNode 12:00:57.658 INFO [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf SolidityNode 12:00:40.691 INFO [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823 Stop Node Gracefully Create file stop.sh\uff0cuse kill -15 to close java-tron.jar\uff08or FullNode.jar\u3001SolidityNode.jar\uff09. You need to modify pid= ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}' to find the correct pid. #!/bin/bash while true; do pid=`ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}'` if [ -n $pid ]; then kill -15 $pid echo The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently... sleep 1 else echo java-tron killed successfully! break fi done Advanced Configurations Read the Advanced Configurations .","title":"Premise"},{"location":"SolidityNode&FullNode_Deployment/#premise","text":"Create separate directories for fullnode and soliditynode /deploy/fullnode /deploy/soliditynode Create two folders for fullnode and soliditynode. Clone the latest master branch of https://github.com/tronprotocol/java-tron and extract it to /deploy/java-tron Make sure you have the proper dependencies. JDK 1.8 (JDK 1.9+ is not supported yet) On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8 , instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8 , you will get Build Failed result. Open UDP ports for connection to the network MINIMUM 2 CPU Cores","title":"Premise"},{"location":"SolidityNode&FullNode_Deployment/#deployment-guide","text":"1. Build the java-tron project cd /deploy/java-tron ./gradlew build 2. Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories download your needed configuration file from https://github.com/tronprotocol/TronDeployment. main_net_config.conf is the configuration for MainNet, and test_net_config.conf is the configuration for TestNet. please rename the configuration file to `config.conf` and use this config.conf to start FullNode and SoliditNode. cp build/libs/FullNode.jar ../fullnode cp build/libs/SolidityNode.jar ../soliditynode 3. You can now run your FullNode using the following command java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 4. Configure the SolidityNode configuration file You need to edit config.conf to connect to your local FullNode. Change trustNode in node to local 127.0.0.1:50051 , which is the default rpc port. Set listen.port to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change rpc port to 50052 or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. rpc { port = 50052 } 5. You can now run your SolidityNode using the following command\uff1a java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 6. Running a Super Representative Node for mainnet java -jar FullNode.jar -p your private key --witness -c your config.conf(Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf This is similar to running a private testnet, except that the IPs in the config.conf are officially declared by TRON. 7. Running a Super Representative Node for private testnet You should modify the config.conf: Replace existing entry in genesis.block.witnesses with your address Replace existing entry in seed.node ip.list with your ip list The first Super Node start, needSyncCheck should be set false Set p2pversion to 61 cd build/libs java -jar FullNode.jar -p your private key --witness -c your config.conf (Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf","title":"Deployment Guide"},{"location":"SolidityNode&FullNode_Deployment/#logging-and-network-connection-verification","text":"Logs for both nodes are located in /deploy/\\*/logs/tron.log . Use tail -f /logs/tron.log/ to follow along with the block syncing. You should see something similar to this in your logs for block synchronization: FullNode 12:00:57.658 INFO [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf SolidityNode 12:00:40.691 INFO [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823","title":"Logging and Network Connection Verification"},{"location":"SolidityNode&FullNode_Deployment/#stop-node-gracefully","text":"Create file stop.sh\uff0cuse kill -15 to close java-tron.jar\uff08or FullNode.jar\u3001SolidityNode.jar\uff09. You need to modify pid= ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}' to find the correct pid. #!/bin/bash while true; do pid=`ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}'` if [ -n $pid ]; then kill -15 $pid echo The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently... sleep 1 else echo java-tron killed successfully! break fi done","title":"Stop Node Gracefully"},{"location":"SolidityNode&FullNode_Deployment/#advanced-configurations","text":"Read the Advanced Configurations .","title":"Advanced Configurations"},{"location":"Tron-VM/","text":"TRON Virtual Machine (TVM) TRON Virtual Machine (TVM) is a lightweight, Turing complete virtual machine developed for the TRON's ecosystem. Its goal is to provide millions of global developers with a custom-built blockchain system that is efficient, convenient, stable, secure and scalable. TVM can connect seamlessly with existing development ecosystem and supports DPOS. TVM is able to be compatible with EVM environment in the beginning, so that instead of learning a new programming language, developers can develop, debug and compile smart contracts in a Remix environment with Solidity and other languages. Once you\u2019ve built and uploaded your smart contract to TRON\u2019s mainnet, it will be executed on the TVM of the SR node to be isolated from external connections. Furthermore, TVM employs the concept of Bandwidth. Different from the gas mechanism on Ethereum\u2019s EVM, operations of transaction or smart contracts on TVM are free, with no tokens consumed. Technically, executable computation capacity on TVM is not restricted by total holding of tokens. Features of TVM 1. Lightweight TVM adopts a lightweight architecture with the aim of reducing resource consumption to guarantee system performance. 2. Stability and security With a meticulous design paradigm and fine-grained underlying operation code, TVM can guarantee the preciseness of every step of a computation, diminishing ambiguity to the largest extent. Out of security reasons, transfers and smart contract running cost only bandwidth points, not TRX, which exempts TRON from being attacked similarly to Ethereum for its mode of gas consumption. Stability of bandwidth consumption is achieved while the cost of each computational step is fixed. 3. Compatibility Currently, TVM is compatible with EVM and will be with more mainstream VMs in the future. Thereby, all smart contracts on EVM are executable on TVM. By connecting seamlessly to existing development ecosystem, higher efficiency can be achieved by developers. Needless to learn a new programming language, they can use mainstream programming languages for smart contract such as Solidity to develop, debug and compile smart contracts in the Remix environment, which greatly reduces development costs. 4. Developer-friendly Thanks to TVM\u2019s bandwidth setup, developments costs are reduced and developers can focus on the logic of their contract code. TVM also offers all-in-one interfaces for contract deployment, triggering and viewing, for the convenience of developers. The following interfaces are available in Tron Wallet-CLI: deploycontract(password, contractAddress, ABI, code, data, value) triggercontract(password, contractAddress, selector, data, value) getcontract(contractAddress) Developers can call these interfaces to deploy, trigger or check smart contracts. How TVM Works The above flowchart shows how TVM works: Compilation of Tron smart contract\u2192execution and computing engines of VM\u2192Interoperation service layer for external interfaces. Put simply, the flow is as follows: + Currently, TVM is compatible mainly with Solidity. The compiler translates Solidity smart contract into bytecode readable and executable on TVM. + A virtual machine processes data through opcode, which is equivalent to operating a logic of a stack-based finite state machine. + TVM accesses blockchain data and invoke External Data Interface through the Interoperation layer. Future Development of TVM 1. More developer-friendly debugging tools Tron will be committed to the development of optimized debugging tools and the establishment of standardized symbol and data format, for improved developer efficiency. 2. Fulfillment of diversified processing demands Different from gas consumption mechanism for every transaction on EVM, there is no charge on TVM. Each operation only occupies bandwidth, which will be released within a certain amount of time after completion of transaction. It takes developers very little to develop smart contracts with more complex logic. It is our belief that besides being used for digital asset transactions, smart contracts could also be suitably applied to areas such as game development, financial risk modeling and scientific computing. The design of TVM inherently supports multi-scenario tasks, and further optimizations of processing speed, response time, and floating point compatibility. 3. Improvement of Just-In-Time (JIT) compilation speed and integration of WebAssembly Improving JIT compilation speed is conducive to faster interpretation and optimized compilation of local code. Meanwhile, Tron is planning to further optimize its TVM based on WebAssembly (WASM). WebAssembly, spearheaded by Apple, Google, Microsoft and Mozilla, is designed to break bottlenecks of current Web browsers and can be generated through compiling C/C++ and other programming languages. Integrating WASM, TVM will be able to provide high performance and high throughput for blockchain to cope with complex scenarios. Usage Guide to TVM 1. Compile contract Contract compilation address: https://remix.ethereum.org 2. Get ABI and bytecode pragma solidity^0.4.11; contract Tron { uint256 tron; constructor() public { } function set(uint256 number) public returns(bool){ tron = number; return true; } } ABI: [{\u201cconstant :false, inputs :[{ name : number , type : uint256 }], name : set , outputs :[{ name : , type : bool }], payable :false, stateMutability : nonpayable , type : function },{ inputs :[], payable :false, stateMutability : nonpayable , type : constructor }] ByteCode: 608060405234801561001057600080fd5b5060c48061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b1146044575b600080fd5b348015604f57600080fd5b50606c600480360381019080803590602001909291905050506086565b604051808215151515815260200191505060405180910390f35b600081600081905550600190509190505600a165627a7a723058209791df3f67e9af451c35d7ae55bda5e352764f6a38ea23fa850b1c1fe1bc72e90029 3. Deploy contract Wallet-cli-vm branch: https://github.com/tronprotocol/wallet-cli/tree/wallet-cli-vm Java-tron-vm branch: https://github.com/tronprotocol/java-tron/tree/develop_vm Password: password of client-end wallet ContractAddress: customized contract address (in Tron\u2019s required format) ABI: interface description Data: parameters of the initial function Value: reserved field deploycontract(Password, ContractAddress, ABI, Code, Data, Value) 4. Invoke contract Selector: function selector Data: parameters triggercontract(Password, ContractAddress, Selector, Data, Value) 5. Check contract getcontract(ContractAddress) The above is an introduction of Tron Virtual Machine and a guide to deployment. We welcome everyone to check out TVM and give us your thoughts and suggestions. We will continue to perfect and update TVM for optimal performance on TRON mainnet.","title":"TRON Virtual Machine"},{"location":"Tron-VM/#tron-virtual-machine-tvm","text":"TRON Virtual Machine (TVM) is a lightweight, Turing complete virtual machine developed for the TRON's ecosystem. Its goal is to provide millions of global developers with a custom-built blockchain system that is efficient, convenient, stable, secure and scalable. TVM can connect seamlessly with existing development ecosystem and supports DPOS. TVM is able to be compatible with EVM environment in the beginning, so that instead of learning a new programming language, developers can develop, debug and compile smart contracts in a Remix environment with Solidity and other languages. Once you\u2019ve built and uploaded your smart contract to TRON\u2019s mainnet, it will be executed on the TVM of the SR node to be isolated from external connections. Furthermore, TVM employs the concept of Bandwidth. Different from the gas mechanism on Ethereum\u2019s EVM, operations of transaction or smart contracts on TVM are free, with no tokens consumed. Technically, executable computation capacity on TVM is not restricted by total holding of tokens.","title":"TRON Virtual Machine (TVM)"},{"location":"Tron-VM/#features-of-tvm","text":"1. Lightweight TVM adopts a lightweight architecture with the aim of reducing resource consumption to guarantee system performance. 2. Stability and security With a meticulous design paradigm and fine-grained underlying operation code, TVM can guarantee the preciseness of every step of a computation, diminishing ambiguity to the largest extent. Out of security reasons, transfers and smart contract running cost only bandwidth points, not TRX, which exempts TRON from being attacked similarly to Ethereum for its mode of gas consumption. Stability of bandwidth consumption is achieved while the cost of each computational step is fixed. 3. Compatibility Currently, TVM is compatible with EVM and will be with more mainstream VMs in the future. Thereby, all smart contracts on EVM are executable on TVM. By connecting seamlessly to existing development ecosystem, higher efficiency can be achieved by developers. Needless to learn a new programming language, they can use mainstream programming languages for smart contract such as Solidity to develop, debug and compile smart contracts in the Remix environment, which greatly reduces development costs. 4. Developer-friendly Thanks to TVM\u2019s bandwidth setup, developments costs are reduced and developers can focus on the logic of their contract code. TVM also offers all-in-one interfaces for contract deployment, triggering and viewing, for the convenience of developers. The following interfaces are available in Tron Wallet-CLI: deploycontract(password, contractAddress, ABI, code, data, value) triggercontract(password, contractAddress, selector, data, value) getcontract(contractAddress) Developers can call these interfaces to deploy, trigger or check smart contracts.","title":"Features of TVM"},{"location":"Tron-VM/#how-tvm-works","text":"The above flowchart shows how TVM works: Compilation of Tron smart contract\u2192execution and computing engines of VM\u2192Interoperation service layer for external interfaces. Put simply, the flow is as follows: + Currently, TVM is compatible mainly with Solidity. The compiler translates Solidity smart contract into bytecode readable and executable on TVM. + A virtual machine processes data through opcode, which is equivalent to operating a logic of a stack-based finite state machine. + TVM accesses blockchain data and invoke External Data Interface through the Interoperation layer.","title":"How TVM Works"},{"location":"Tron-VM/#future-development-of-tvm","text":"1. More developer-friendly debugging tools Tron will be committed to the development of optimized debugging tools and the establishment of standardized symbol and data format, for improved developer efficiency. 2. Fulfillment of diversified processing demands Different from gas consumption mechanism for every transaction on EVM, there is no charge on TVM. Each operation only occupies bandwidth, which will be released within a certain amount of time after completion of transaction. It takes developers very little to develop smart contracts with more complex logic. It is our belief that besides being used for digital asset transactions, smart contracts could also be suitably applied to areas such as game development, financial risk modeling and scientific computing. The design of TVM inherently supports multi-scenario tasks, and further optimizations of processing speed, response time, and floating point compatibility. 3. Improvement of Just-In-Time (JIT) compilation speed and integration of WebAssembly Improving JIT compilation speed is conducive to faster interpretation and optimized compilation of local code. Meanwhile, Tron is planning to further optimize its TVM based on WebAssembly (WASM). WebAssembly, spearheaded by Apple, Google, Microsoft and Mozilla, is designed to break bottlenecks of current Web browsers and can be generated through compiling C/C++ and other programming languages. Integrating WASM, TVM will be able to provide high performance and high throughput for blockchain to cope with complex scenarios.","title":"Future Development of TVM"},{"location":"Tron-VM/#usage-guide-to-tvm","text":"1. Compile contract Contract compilation address: https://remix.ethereum.org 2. Get ABI and bytecode pragma solidity^0.4.11; contract Tron { uint256 tron; constructor() public { } function set(uint256 number) public returns(bool){ tron = number; return true; } } ABI: [{\u201cconstant :false, inputs :[{ name : number , type : uint256 }], name : set , outputs :[{ name : , type : bool }], payable :false, stateMutability : nonpayable , type : function },{ inputs :[], payable :false, stateMutability : nonpayable , type : constructor }] ByteCode: 608060405234801561001057600080fd5b5060c48061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b1146044575b600080fd5b348015604f57600080fd5b50606c600480360381019080803590602001909291905050506086565b604051808215151515815260200191505060405180910390f35b600081600081905550600190509190505600a165627a7a723058209791df3f67e9af451c35d7ae55bda5e352764f6a38ea23fa850b1c1fe1bc72e90029 3. Deploy contract Wallet-cli-vm branch: https://github.com/tronprotocol/wallet-cli/tree/wallet-cli-vm Java-tron-vm branch: https://github.com/tronprotocol/java-tron/tree/develop_vm Password: password of client-end wallet ContractAddress: customized contract address (in Tron\u2019s required format) ABI: interface description Data: parameters of the initial function Value: reserved field deploycontract(Password, ContractAddress, ABI, Code, Data, Value) 4. Invoke contract Selector: function selector Data: parameters triggercontract(Password, ContractAddress, Selector, Data, Value) 5. Check contract getcontract(ContractAddress) The above is an introduction of Tron Virtual Machine and a guide to deployment. We welcome everyone to check out TVM and give us your thoughts and suggestions. We will continue to perfect and update TVM for optimal performance on TRON mainnet.","title":"Usage Guide to TVM"},{"location":"Tron-deployment/","text":"Premise Create separate directories for fullnode and soliditynode /deploy/fullnode /deploy/soliditynode Create two folders for fullnode and soliditynode. Clone the latest master branch of https://github.com/tronprotocol/java-tron and extract it to /deploy/java-tron Make sure you have the proper dependencies. JDK 1.8 (JDK 1.9+ is not supported yet) On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8 , instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8 , you will get Build Failed result. Open UDP ports for connection to the network MINIMUM 2 CPU Cores Deployment Guide 1. Build the java-tron project cd /deploy/java-tron ./gradlew build 2. Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories download your needed configuration file from https://github.com/tronprotocol/TronDeployment. main_net_config.conf is the configuration for MainNet, and test_net_config.conf is the configuration for TestNet. please rename the configuration file to `config.conf` and use this config.conf to start FullNode and SoliditNode. cp build/libs/FullNode.jar ../fullnode cp build/libs/SolidityNode.jar ../soliditynode 3. You can now run your FullNode using the following command java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 4. Configure the SolidityNode configuration file You need to edit config.conf to connect to your local FullNode. Change trustNode in node to local 127.0.0.1:50051 , which is the default rpc port. Set listen.port to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change rpc port to 50052 or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. rpc { port = 50052 } 5. You can now run your SolidityNode using the following command\uff1a java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 6. Running a Super Representative Node for mainnet java -jar FullNode.jar -p your private key --witness -c your config.conf(Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf This is similar to running a private testnet, except that the IPs in the config.conf are officially declared by TRON. 7. Running a Super Representative Node for private testnet You should modify the config.conf: Replace existing entry in genesis.block.witnesses with your address Replace existing entry in seed.node ip.list with your ip list The first Super Node start, needSyncCheck should be set false Set p2pversion to 61 cd build/libs java -jar FullNode.jar -p your private key --witness -c your config.conf (Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf Logging and Network Connection Verification Logs for both nodes are located in /deploy/\\*/logs/tron.log . Use tail -f /logs/tron.log/ to follow along with the block syncing. You should see something similar to this in your logs for block synchronization: FullNode 12:00:57.658 INFO [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf SolidityNode 12:00:40.691 INFO [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823 Stop Node Gracefully Create file stop.sh\uff0cuse kill -15 to close java-tron.jar\uff08or FullNode.jar\u3001SolidityNode.jar\uff09. You need to modify pid= ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}' to find the correct pid. #!/bin/bash while true; do pid=`ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}'` if [ -n $pid ]; then kill -15 $pid echo The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently... sleep 1 else echo java-tron killed successfully! break fi done Advanced Configurations Read the Advanced Configuration","title":"TRON Deployment"},{"location":"Tron-deployment/#premise","text":"Create separate directories for fullnode and soliditynode /deploy/fullnode /deploy/soliditynode Create two folders for fullnode and soliditynode. Clone the latest master branch of https://github.com/tronprotocol/java-tron and extract it to /deploy/java-tron Make sure you have the proper dependencies. JDK 1.8 (JDK 1.9+ is not supported yet) On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8 , instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8 , you will get Build Failed result. Open UDP ports for connection to the network MINIMUM 2 CPU Cores","title":"Premise"},{"location":"Tron-deployment/#deployment-guide","text":"1. Build the java-tron project cd /deploy/java-tron ./gradlew build 2. Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories download your needed configuration file from https://github.com/tronprotocol/TronDeployment. main_net_config.conf is the configuration for MainNet, and test_net_config.conf is the configuration for TestNet. please rename the configuration file to `config.conf` and use this config.conf to start FullNode and SoliditNode. cp build/libs/FullNode.jar ../fullnode cp build/libs/SolidityNode.jar ../soliditynode 3. You can now run your FullNode using the following command java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 4. Configure the SolidityNode configuration file You need to edit config.conf to connect to your local FullNode. Change trustNode in node to local 127.0.0.1:50051 , which is the default rpc port. Set listen.port to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change rpc port to 50052 or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. rpc { port = 50052 } 5. You can now run your SolidityNode using the following command\uff1a java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 6. Running a Super Representative Node for mainnet java -jar FullNode.jar -p your private key --witness -c your config.conf(Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf This is similar to running a private testnet, except that the IPs in the config.conf are officially declared by TRON. 7. Running a Super Representative Node for private testnet You should modify the config.conf: Replace existing entry in genesis.block.witnesses with your address Replace existing entry in seed.node ip.list with your ip list The first Super Node start, needSyncCheck should be set false Set p2pversion to 61 cd build/libs java -jar FullNode.jar -p your private key --witness -c your config.conf (Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf","title":"Deployment Guide"},{"location":"Tron-deployment/#logging-and-network-connection-verification","text":"Logs for both nodes are located in /deploy/\\*/logs/tron.log . Use tail -f /logs/tron.log/ to follow along with the block syncing. You should see something similar to this in your logs for block synchronization: FullNode 12:00:57.658 INFO [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf SolidityNode 12:00:40.691 INFO [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823","title":"Logging and Network Connection Verification"},{"location":"Tron-deployment/#stop-node-gracefully","text":"Create file stop.sh\uff0cuse kill -15 to close java-tron.jar\uff08or FullNode.jar\u3001SolidityNode.jar\uff09. You need to modify pid= ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}' to find the correct pid. #!/bin/bash while true; do pid=`ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}'` if [ -n $pid ]; then kill -15 $pid echo The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently... sleep 1 else echo java-tron killed successfully! break fi done","title":"Stop Node Gracefully"},{"location":"Tron-deployment/#advanced-configurations","text":"Read the Advanced Configuration","title":"Advanced Configurations"},{"location":"Tron-http/","text":"TRON Built-in Http Introduction HexString and Base58check Transcode Demo JAVA: https://github.com/tronprotocol/wallet-cli/blob/master/src/main/java/org/tron/demo/TransactionSignDemo.java#L92 PHP: https://github.com/tronprotocol/Documentation/blob/master/TRX_CN/index.php Since v3.6, parameter 'visible' is added, when 'visible' is set true, no need to transcode the relevant address and string. This parameter is valid for all api, including solidityNode api and FullNode api. When 'visible' is set true, the format of the input address must be base58, input string must text string, so does the format of the output. If 'visible' is set false or null, the api acts the same as previous version. If the format of the parameters do not match with the set of visible, it will throw out an error. Way to set the 'visible' parameter: 1. For the api needs no parameter: by adding 'visible' parameter in the url example: http://127.0.0.1:8090/wallet/listexchanges?visible=true 2. For POST method api: By adding 'visible' parameter to the most out layer of the json example: curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d '{ owner_address_ : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , to_address_ : TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW , amount : 1000000, visible : true }' 3. For GET method api: By adding 'visible' parameter in the url, as way 1 SolidityNode Api Introduction SolidityNode api's default http port is 8091, when solidityNode is started, http service will be started too. /walletsolidity/getaccount Description: Query an account information demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getaccount -d '{ address : 41E552F6487585C2B58BC2C9BB4492BC1F17132CD0 }' Parameter address: Default hexString Return: Account object walletsolidity/listwitnesses Description: Qyery the list of the witnesses demo: curl -X GET http://127.0.0.1:8091/walletsolidity/listwitnesses Parameter: No parameter Return: The list of all the witnesses /walletsolidity/getassetissuelist Description: Query the list of all the tokens demo: curl -X GET http://127.0.0.1:8091/walletsolidity/getassetissuelist Parameter: No parameter Return: The list of all the tokens /walletsolidity/getpaginatedassetissuelist Description: Query the list of all the tokens by pagination demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getpaginatedassetissuelist -d '{ offset : 0, limit : 10 }' Parameter offset: the index of the start token Parameter limit: the amount of tokens per page Return: The list of tokens by pagination /walletsolidity/getassetissuebyname(Since Odyssey-v3.2) Description: Query a token by token name demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyname -d '{ value : 44756354616E }' Parameter value: Token name, default hexString Return: Token object Note: Since Odyssey-v3.2, getassetissuebyid or getassetissuelistbyname is recommended, as since v3.2, token name can be repeatable. If the token name you query is not unique, this api will throw out an error /walletsolidity/getassetissuelistbyname(Since Odyssey-v3.2) Description: Query the list of tokens by name demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuelistbyname -d '{ value : 44756354616E }' Parameter value: Token name, default hexString Return: The list of tokens /walletsolidity/getassetissuebyid(Since Odyssey-v3.2) Description: Query a token by token id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyid -d '{ value : 1000001 }' Parameter value: Token id Return: Token object /walletsolidity/getnowblock Description: Query the latest block information demo: curl -X GET http://127.0.0.1:8091/walletsolidity/getnowblock Parameter: No parameter Return: the latest block from solidityNode /walletsolidity/getblockbynum Description: Query a block information by block height demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbynum -d '{ num : 100 }' Parameter num: Block height Return: Block information /walletsolidity/gettransactionbyid Description: Query an transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactionbyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Transaction information /walletsolidity/gettransactioncountbyblocknum(Since Odyssey-v3.2) Description: Query th the number of transactions in a specific block demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioncountbyblocknum -d '{ num : 100 }' Parameter num: Block height Return: The number of transactions /walletsolidity/gettransactioninfobyid Description: Query the transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioninfobyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Transaction fee block height /walletsolidity/getdelegatedresource(Since Odyssey-v3.2) Description: Query the energy delegation information demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresource -d '{ fromAddress : 419844f7600e018fd0d710e2145351d607b3316ce9 , toAddress : 41c6600433381c731f22fc2b9f864b14fe518b322f }' Parameter fromAddress: Energy from address, default hexString Parameter toAddress: Energy to address, default hexString Return: Energy delegation information /walletsolidity/getdelegatedresourceaccountindex(Since Odyssey-v3.2) Description: Query the energy delegation index by an account demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresourceaccountindex -d '{ value : 419844f7600e018fd0d710e2145351d607b3316ce9 }' Parameter value: Address, default hexString Return: Energy delegation index /walletsolidity/getexchangebyid(Since Odyssey-v3.2) Description: Query an exchange pair by exchange pair id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getexchangebyid -d '{ id : 1 }' Parameter id: Exchange pair id Return: Exchange pair object /walletsolidity/listexchanges(Since Odyssey-v3.2) Description: Query the list of all the exchange pairs demo: curl -X GET http://127.0.0.1:8091/walletsolidity/listexchanges Parameter: No parameter Return: The list of all the exchange pairs /walletsolidity/getaccountbyid Description: Query an account information by account id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getaccountbyid -d '{ account_id : 6161616162626262 }' Parameter account_id: Account id, default hexString Return: Account object /walletsolidity/getblockbyid Description: Query a block information by block id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbyid-d '{ value : 0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73 }' Parameter value: Block id Return: Block object /walletsolidity/getblockbylimitnext Description: Query a list of blocks by range demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylimitnext -d '{ startNum : 1, endNum : 2 }' Parameter startNum: The start block height, itself included Parameter endNum: The end block height, itself not included Return: The list of the blocks /walletsolidity/getblockbylatestnum Description: Query the several latest blocks demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylatestnum -d '{ num : 5 }' Parameter num: The number of the blocks expected to return Return: The list of the blocks /walletextension/gettransactionsfromthis\uff08No longer supported in the latest version\uff09 Description: Query the transactions initiated by an account demo: curl -X POST http://127.0.0.1:8091/walletextension/gettransactionsfromthis -d '{ account : { address : 41E552F6487585C2B58BC2C9BB4492BC1F17132CD0 }, offset : 0, limit : 10, startTime : 1546099200000, endTime : 1552028828000 }' Parameter address: Address, default hexString Parameter offset: The start index of the transactions, must not greater then 10000 Parameter limit: The number of transactions expected to return, maximum 50, offset+limit must smaller than 10000 Parameter startTime: Query start time Parameter endTime: Query end time, Default latest 7 days Return: The list of transactions Note: This api is no longer supported in the latest version, you can use the central node api: 47.90.247.237:8091/walletextension/gettransactionsfromthis /walletextension/gettransactionstothis\uff08No longer supported in the latest version\uff09 Description: Query the transactions received by an account demo: curl -X POST http://127.0.0.1:8091/walletextension/gettransactionstothis -d '{ account : { address : 41E552F6487585C2B58BC2C9BB4492BC1F17132CD0 }, offset : 0, limit : 10, startTime : 1546099200000, endTime : 1552028828000 }' Parameter address: Address, default hexString Parameter offset: The start index of the transactions, must not greater then 10000 Parameter limit: The number of transactions expected to return, maximum 50, offset+limit must smaller than 10000 Parameter startTime: Query start time Parameter endTime: Query end time, Default latest 7 days Return: The list of transactions Note: This api is no longer supported in the latest version, you can use the central node api: 47.90.247.237:8091/walletextension/gettransactionstothis /wallet/getnodeinfo(Since Odyssey-v3.2) Description: Query the current node infromation demo: curl -X GET http://127.0.0.1:8091/wallet/getnodeinfo Parameter: No parameter Return: The node information /walletsolidity/getdeferredtransactionbyid Description: Query the deferred transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdeferredtransactionbyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: transaction id Return: Deferred transaction object /walletsolidity/getdeferredtransactioninfobyid Description: Query the deferred transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdeferredtransactioninfobyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: transaction id Return: Deferred transaction fee block height /walletsolidity/getmerkletreevoucherinfo Description: To get a merkle tree infromation of a note demo: curl -X POST http://127.0.0.1:8090/wallet/getmerkletreevoucherinfo -d '{ out_points :[{ hash : 185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74 , index :0 }] }' Parameter out_points: Note information Return: A merkle tree of a note /walletsolidity/scannotebyivk Description: To get all the notes by ivk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyivk -d '{ startNum : 0, endNum : 100000, ivk : 80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05 }' Parameter startNum: The start block height Parameter endNum: The end block height Parameter ivk: Incoming viewing key Return: Notes list /walletsolidity/scannotebyovk Description: To get all the notes by ovk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyovk -d '{ startNum : 0, endNum : 100000, ovk : 705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539 }' Parameter startNum: The start block height Parameter endNum: The end block height Parameter ovk: Outgoing viewing key Return: Notes list /walletsolidity/isspend Description: To check whether a note is spent or not demo: curl -X POST http://127.0.0.1:8090/wallet/isspend -d '{ ak : a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129 , nk : 62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e , note : { payment_address : ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq , rcm : 74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a , value : 500000000 }, voucher : { tree : { left : { content : a4d763fae3fee78964ccdf7567ec3062c95a5b97825d731202d3dfa6cb01c143 } }, rt : 7dc3652c2a16e8518a8be0e3e038f9d28c3eb96f13e8da8acc2a9b650702f33e } }' Parameter ak: Ak key Parameter nk: Nk key Parameter note: Note information Parameter voucher: Voucher information Return: Note status FullNode Api Introduction FullNode api's default http port is 8090, when FullNode is started, http service will be started too. wallet/createtransaction Description: Create a transfer transaction, if to address is not existed, then create the account on the blockchain demo: curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d '{ to_address : 41e9d79cc47518930bc322d9bf7cddd260a0260a8d , owner_address : 41D1E7A6BC354106CB410E65FF8B181C600FF14292 , amount : 1000 }' Parameter to_address: To address, default hexString Parameter owner_address: Owner address, default hexString Parameter amount: Transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/gettransactionsign Description: To sign a transaction demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactionsign -d '{ transaction : { txID : 454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8 , raw_data : { contract : [ { parameter : { value : { amount : 1000, owner_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , to_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 }, type_url : type.googleapis.com/protocol.TransferContract }, type : TransferContract } ], ref_block_bytes : 267e , ref_block_hash : 9a447d222e8de9f2 , expiration : 1530893064000, timestamp : 1530893006233 } }, privateKey : your private key }' Parameter transaction: Transaction object Parameter privateKey: Private key Return: Transaction after sign Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/broadcasttransaction Description: Broadcast transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/broadcasttransaction -d '{ signature : [ 97c825b41c77de2a8bd65b3df55cd4c0df59c307c0187e42321dcc1cc455ddba583dd9502e17cfec5945b34cad0511985a6165999092a6dec84c2bdd97e649fc01 ], txID : 454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8 , raw_data : { contract : [ { parameter : { value : { amount : 1000, owner_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , to_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 }, type_url : type.googleapis.com/protocol.TransferContract }, type : TransferContract } ], ref_block_bytes : 267e , ref_block_hash : 9a447d222e8de9f2 , expiration : 1530893064000, timestamp : 1530893006233 } }' Parameter: Transaction after sign Return: The result of the broadcast wallet/broadcasthex Description: Broadcast transaction hex string after sign demo: curl -X POST http://127.0.0.1:8090/wallet/broadcasthex -d '{ transaction : 0A8A010A0202DB2208C89D4811359A28004098A4E0A6B52D5A730802126F0A32747970652E676F6F676C65617069732E636F6D2F70726F746F636F6C2E5472616E736665724173736574436F6E747261637412390A07313030303030311215415A523B449890854C8FC460AB602DF9F31FE4293F1A15416B0580DA195542DDABE288FEC436C7D5AF769D24206412418BF3F2E492ED443607910EA9EF0A7EF79728DAAAAC0EE2BA6CB87DA38366DF9AC4ADE54B2912C1DEB0EE6666B86A07A6C7DF68F1F9DA171EEE6A370B3CA9CBBB00 }' Parameter: Transaction hex after sign Return: The result of the broadcast wallet/updateaccount Description: Update the name of an account demo: curl -X POST http://127.0.0.1:8090/wallet/updateaccount -d '{ account_name : 0x7570646174654e616d6531353330383933343635353139 , owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 }' Parameter account_name: Account name, default hexString Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/votewitnessaccount Description: Vote for witnesses demo: curl -X POST http://127.0.0.1:8090/wallet/votewitnessaccount -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , votes : [ { vote_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , vote_count : 5 } ] }' Parameter owner_address: Owner address, default hexString Parameter votes: 'vote_address' stands for the address of the witness you want to vote, default hexString, 'vote_count' stands for the number of votes you want to vote Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ owner_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , name : 0x6173736574497373756531353330383934333132313538 , abbr : 0x6162627231353330383934333132313538 , total_supply : 4321, trx_num : 1, num : 1, start_time : 1530894315158, end_time : 1533894312158, description : 007570646174654e616d6531353330363038383733343633 , url : 007570646174654e616d6531353330363038383733343633 , free_asset_net_limit : 10000, public_free_asset_net_limit : 10000, frozen_supply : { frozen_amount : 1, frozen_days : 2 } }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter frozen_supply: Token frozen supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN wallet/updatewitness Description: Update the witness' website url demo: curl -X POST http://127.0.0.1:8090/wallet/updatewitness -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , update_url : 007570646174654e616d6531353330363038383733343633 }' Parameter owner_address: Owner address, default hexString Parameter update_url: Website url, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/createaccount Description: Create an account demo: curl -X POST http://127.0.0.1:8090/wallet/createaccount -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , account_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 }' Parameter owner_address: Owner address, default hexString Parameter account_address: New address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: It costs 0.1 TRX wallet/createwitness Description: Apply to become a witness demo: curl -X POST http://127.0.0.1:8090/wallet/createwitness -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , url : 007570646174654e616d6531353330363038383733343633 }' Parameter owner_address: Owner address, default hexString Parameter url: Website url, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , to_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , asset_name : 31303030303031 , amount : 100 }' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token wallet/easytransfer Description: Easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransfer -d '{ passPhrase : your password , toAddress : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , amount : 100 }' Parameter passPhrase: Password, default hexString Parameter toAddress: To address, default hexString Parameter amount: Transfer TRX amount Return: Transaction object the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/easytransferasset Description: Easy token transfer demo\uff1acurl -X POST http://127.0.0.1:8090/wallet/easytransferasset -d '{ passPhrase : your password , toAddress : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , assetId : 1000001 , amount : 100 }' Parameter passPhrase: Password, default hexString Parameter toAddress: To address, default hexString Parameter assetId: Token id Parameter amount: Transfer token amount Return: Transaction object the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network The unit of 'amount' is the smallest unit of the token wallet/createaddress Description: Create an address with a password demo: curl -X POST http://127.0.0.1:8090/wallet/createaddress -d '{ value : 3230313271756265696a696e67 }' Parameter value: Password, default hexString Return: An address Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ to_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 , amount : 100, asset_name : 3230313271756265696a696e67 }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token wallet/freezebalance Description: Freeze TRX demo: curl -X POST http://127.0.0.1:8090/wallet/freezebalance -d '{ owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 , frozen_balance : 10000, frozen_duration : 3, resource : BANDWIDTH , receiveraddress : 414332f387585c2b58bc2c9bb4492bc1f17342cd1 }' Parameter owner_address: Owner address, default hexString Parameter frozen_balance: TRX freeze amount Parameter frozen_duration: TRX freeze duration, at least 3 days Parameter resource: TRX freeze type, 'BANDWIDTH' or 'ENERGY' Parameter receiverAddress: The address that will receive the resource, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/unfreezebalance Description: Unfreeze the frozen TRX that is due demo: curl -X POST http://127.0.0.1:8090/wallet/unfreezebalance -d '{ owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 , resource : BANDWIDTH , receiveraddress : 414332f387585c2b58bc2c9bb4492bc1f17342cd1 }' Parameter owner_address: Owner address, default hexString Parameter resource: Frozen TRX unfreeze type 'BANDWIDTH' or 'ENERGY' Parameter receiverAddress: The address that will lose the resource, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/unfreezeasset Description: Unfreeze the frozen token that is due demo: curl -X POST http://127.0.0.1:8090/wallet/unfreezeasset -d '{ owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 }' Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/withdrawbalance Description: Withdraw reward to account balance for witnesses demo: curl -X POST http://127.0.0.1:8090/wallet/withdrawbalance -d '{ owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 }' Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: It can only withdraw once for every 24 hours wallet/updateasset Description: Update token information demo: curl -X POST http://127.0.0.1:8090/wallet/updateasset -d '{ owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 , description : , url : , new_limit : 1000000, new_public_limit : 100 }' Parameter owner_address: The issuers address of the token, default hexString Parameter description: The description of token, default hexString Parameter url: The token's website url, default hexString Parameter new_limit: Each token holder's free bandwidth Parameter new_public_limit: The total free bandwidth of the token Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/listnodes Description: Query the list of nodes connected to the ip of the api demo: curl -X GET http://127.0.0.1:8090/wallet/listnodes Parameter: No parameter Return: The list of nodes wallet/getassetissuebyaccount Description: Query the token issue information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyaccount -d '{ address : 41F9395ED64A6E1D4ED37CD17C75A1D247223CAF2D }' Parameter address: Token issuer's address, default hexString Return: Token object wallet/getaccountnet Description: Query the bandwidth information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountnet -d '{ address : 4112E621D5577311998708F4D7B9F71F86DAE138B5 }' Parameter address: Address, default hexString Return: Bandwidth information wallet/getassetissuebyname Description: Query a token by token name demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyname -d '{ value : 44756354616E }' Parameter value: Token name, default hexString Return: Token object Note: Since Odyssey-v3.2, getassetissuebyid or getassetissuelistbyname is recommended, as since v3.2, token name can be repeatable. If the token name you query is not unique, this api will throw out an error wallet/getassetissuelistbyname(Since Odyssey-v3.2) Description: Query the list of tokens by name demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuelistbyname -d '{ value : 44756354616E }' Parameter value: Token name, default hexString Return: The list of tokens wallet/getassetissuebyid(Since Odyssey-v3.2) Description: Query a token by token id demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyid -d '{ value : 1000001 }' Parameter value: Token id Return: Token object wallet/getnowblock Description: Query the latest block information demo: curl -X GET http://127.0.0.1:8090/wallet/getnowblock Parameter: No parameter Return: The latest block wallet/getblockbynum Description: Query a block information by block height demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbynum -d '{ num : 1 }' Parameter num: Block height Return: Block information wallet/getblockbyid Description: Query a block information by block id demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbyid-d '{ value : 0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73 }' Parameter value: Block id Return: Block object wallet/getblockbylimitnext Description: Query a list of blocks by range demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbylimitnext -d '{ startNum : 1, endNum : 2 }' Parameter startNum: The start block height, itself included Parameter endNum: The end block height, itself not included Return: The list of the blocks wallet/getblockbylatestnum Description: Query the several latest blocks demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbylatestnum -d '{ num : 5 }' Parameter num: The number of the blocks expected to return Return: The list of the blocks wallet/gettransactionbyid Description: Query an transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactionbyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Transaction information wallet/gettransactioninfobyid(Since Odyssey-v3.2) Description: Query the transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactioninfobyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Transaction fee block height wallet/gettransactioncountbyblocknum(Since Odyssey-v3.2) Description: Query th the number of transactions in a specific block demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactioncountbyblocknum -d '{ num : 100 }' Parameter num: Block height Return: The number of transactions wallet/getaccount Description: Query an account information demo: curl -X POST http://127.0.0.1:8090/wallet/getaccount -d '{ address : 41E552F6487585C2B58BC2C9BB4492BC1F17132CD0 }' Parameter address: Default hexString Return: Account object wallet/listwitnesses Description: Qyery the list of the witnesses demo: curl -X GET http://127.0.0.1:8090/wallet/listwitnesses Parameter: No parameter Return: The list of all the witnesses wallet/getassetissuelist Description: Query the list of all the tokens demo: curl -X GET http://127.0.0.1:8090/wallet/getassetissuelist Parameter: No parameter Return: The list of all the tokens wallet/getpaginatedassetissuelist Description: Query the list of all the tokens by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedassetissuelist -d '{ offset : 0, limit : 10 }' Parameter offset: The index of the start token Parameter limit: The amount of tokens per page Return: The list of tokens by pagination wallet/getpaginatedproposallist(Since Odyssey-v3.5) Description: Query the list of all the proposals by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedproposallist -d '{ offset : 0, limit : 10 }' Parameter offset: The index of the start proposal Parameter limit: The amount of proposals per page Return: The list of proposals by pagination wallet/getpaginatedexchangelist(Odyssey-v3.2\u5f00\u59cb\u652f\u6301) Description: Query the list of all the exchange pairs by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedexchangelist -d '{ offset : 0, limit : 10 }' Parameter offset: The index of the start exchange pair Parameter limit: The amount of exchange pairs per page Return: The list of exchange pairs by pagination wallet/totaltransaction Description: Query the total transactions number demo: curl -X GET http://127.0.0.1:8090/wallet/totaltransaction Parameter: No parameter Return: Total transaction number wallet/getnextmaintenancetime Description: Query the time interval till the next vote round demo: curl -X GET http://127.0.0.1:8090/wallet/getnextmaintenancetime Parameter: No parameter Return: The time interval till the next vote round(unit: ms) wallet/easytransferbyprivate Description: TRX Easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransferbyprivate -d '{ privateKey : D95611A9AF2A2A45359106222ED1AFED48853D9A44DEFF8DC7913F5CBA727366 , toAddress : 4112E621D5577311998708F4D7B9F71F86DAE138B5 , amount : 10000 }' Parameter privateKey: Private key, default hexString Parameter toAddress: To address, default hexString Parameter amount: TRX transfer amount Return: Transaction object the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/easytransferassetbyprivate Description: Token easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransferassetbyprivate -d '{ privateKey : D95611A9AF2A2A45359106222ED1AFED48853D9A44DEFF8DC7913F5CBA727366 , toAddress : 4112E621D5577311998708F4D7B9F71F86DAE138B5 , assetId : 1000001 , amount : 10000 }' Parameter privateKey: Private key, default hexString Parameter toAddress: To address, default hexString Parameter assetId: Token id Parameter amount: Token transfer amount Return: Transaction object the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network The unit of 'amount' is the smallest unit of the token wallet/generateaddress Description: Generate address and private key demo: curl -X GET http://127.0.0.1:8090/wallet/generateaddress Parameter: No parameter Return: Address and private key Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/validateaddress Description: Check the validity of the address demo: curl -X POST http://127.0.0.1:8090/wallet/validateaddress -d '{ address : 4189139CB1387AF85E3D24E212A008AC974967E561 }' Return: The check result wallet/deploycontract Description: Deploy a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/deploycontract -d '{ abi : [{\\ constant\\ :false,\\ inputs\\ :[{\\ name\\ :\\ key\\ ,\\ type\\ :\\ uint256\\ },{\\ name\\ :\\ value\\ ,\\ type\\ :\\ uint256\\ }],\\ name\\ :\\ set\\ ,\\ outputs\\ :[],\\ payable\\ :false,\\ stateMutability\\ :\\ nonpayable\\ ,\\ type\\ :\\ function\\ },{\\ constant\\ :true,\\ inputs\\ :[{\\ name\\ :\\ key\\ ,\\ type\\ :\\ uint256\\ }],\\ name\\ :\\ get\\ ,\\ outputs\\ :[{\\ name\\ :\\ value\\ ,\\ type\\ :\\ uint256\\ }],\\ payable\\ :false,\\ stateMutability\\ :\\ view\\ ,\\ type\\ :\\ function\\ }] , bytecode : 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 , parameter : , call_value : 100, name : SomeContract , consume_user_resource_percent : 30, fee_limit : 10, origin_energy_limit : 10, owner_address : 41D1E7A6BC354106CB410E65FF8B181C600FF14292 }' Parameter abi: Abi Parameter bytecode: Bytecode, default hexString Parameter parameter: The list of the parameters of the constructor, It should be converted hexString after encoded according to ABI encoder. If constructor has no parameter, this can be optional Parameter consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter call_token_value: The amount of trc10 token transfer to the contract for each call (Optional) Parameter token_id: The id of trc10 token transfer to the contract (Optional) Parameter owner_address: Owner address of the contract, default hexString Parameter name: Contract name Parameter origin_energy_limit: The maximum resource consumption of the creator in one execution or creation Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/triggersmartcontract Description: Trigger smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/triggersmartcontract -d '{ contract_address : 4189139CB1387AF85E3D24E212A008AC974967E561 , function_selector : set(uint256,uint256) , parameter : 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 , fee_limit : 10, call_value : 100, owner_address : 41D1E7A6BC354106CB410E65FF8B181C600FF14292 }' Parameter contract_address: Contract address, default hexString Parameter function_selector: Function call, must not leave a blank space Parameter parameter: The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a js tool provided by remix to convert a parameter like [1,2] to the format that VM requires Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter call_token_value: The amount of trc10 token transfer to the contract for each call Parameter token_id: The id of trc10 token transfer to the contract Parameter owner_address: Owner address that triggers the contract, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/getcontract Description: Query a contract demo: curl -X POST http://127.0.0.1:8090/wallet/getcontract -d '{ value : 4189139CB1387AF85E3D24E212A008AC974967E561 }' Parameter value: Contract address, default hexString Return: Smart contract object wallet/proposalcreate Description: Create a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposalcreate -d '{ owner_address : 419844F7600E018FD0D710E2145351D607B3316CE9 , parameters : [ { key : 0, value : 100000 }, { key : 1, value : 2 } ] }' Parameter owner_address: Creator address Parameter parameters: Proposal parameters Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getproposalbyid Description: Query a proposal by proposal id demo: curl -X POST http://127.0.0.1:8090/wallet/getproposalbyid -d '{ id : 1 }' Parameter id: Proposal id Return: The proposal information wallet/listproposals Description: Query all the proposals demo: curl -X POST http://127.0.0.1:8090/wallet/listproposals Parameter: No parameter Return: The list of all the proposals wallet/proposalapprove Description: To approve a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposalapprove -d '{ owner_address : 419844F7600E018FD0D710E2145351D607B3316CE9 , proposal_id : 1, is_add_approval : true }' Parameter owner_address: The address that makes the approve action, default hexString Parameter proposal_id: Proposal id Parameter is_add_approval: Whether to approve Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/proposaldelete Description: To delete a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposaldelete -d '{ owner_address : 419844F7600E018FD0D710E2145351D607B3316CE9 , proposal_id : 1 }' Parameter owner_address: Owner address of the proposal, default hexString Parameter proposal_id: Proposal id Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getaccountresource Description: Query the resource information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountresource -d '{ address : 419844f7600e018fd0d710e2145351d607b3316ce9 }' Parameter address: Address, default hexString Return: The resource information wallet/exchangecreate Description: Create an exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangecreate -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , first_token_id : token_a , first_token_balance : 100, second_token_id : token_b , second_token_balance : 200 }' Parameter first_token_id: The first token's id, default hexString Parameter first_token_balance: The first token's balance Parameter second_token_id: The second token's id, default hexString Parameter second_token_balance: The second token's balance Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'first_token_balance' and 'second_token_balance' is the smallest unit of the token wallet/exchangeinject Description: Inject funds for exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangeinject -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , exchange_id : 1, token_id : 74726f6e6e616d65 , quant : 100 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Token inject amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token wallet/exchangewithdraw Description: Withdraw from exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangewithdraw -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , exchange_id : 1, token_id : 74726f6e6e616d65 , quant : 100 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Token withdraw amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token wallet/exchangetransaction Description: Participate the transaction of exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangetransaction -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , exchange_id : 1, token_id : 74726f6e6e616d65 , quant : 100, expected : 10 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Sell token amount Parameter expected: Expected token amount to get Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' and 'expected' is the smallest unit of the token wallet/getexchangebyid Description: Query an exchange pair by exchange pair id demo: curl -X POST http://127.0.0.1:8090/wallet/getexchangebyid -d '{ id : 1 }' Parameter id: Exchange pair id Return: Exchange pair information wallet/listexchanges Description: Query the list of all the exchange pairs demo: curl -X GET http://127.0.0.1:8090/wallet/listexchanges Parameter: No parameter Return: The list of all the exchange pairs wallet/getchainparameters Description: Query the parameters of the blockchain used for witnessses to create a proposal demo: curl -X GET http://127.0.0.1:8090/wallet/getchainparameters Parameter: No parameter Return: The list of parameters of the blockchain wallet/updatesetting Description: Update the consume_user_resource_percent parameter of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/updatesetting -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , contract_address : 41c6600433381c731f22fc2b9f864b14fe518b322f , consume_user_resource_percent : 7 }' Parameter owner_address: Owner address of the smart contract, default hexString Parameter contract_address: Smart contract address, default hexString Parameter consume_user_resource_percent: Consume user's resource percentage Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/updateenergylimit Description: Update the origin_energy_limit parameter of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/updatesetting -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , contract_address : 41c6600433381c731f22fc2b9f864b14fe518b322f , origin_energy_limit : 7 }' Parameter owner_address: Owner address of the smart contract, default hexString Parameter contract_address: Smart contract address, default hexString Parameter origin_energy_limit: The maximum resource consumption of the creator in one execution or creation Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getdelegatedresource(Since Odyssey-v3.2) Description: Query the energy delegation information demo: curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresource -d '{ fromAddress : 419844f7600e018fd0d710e2145351d607b3316ce9 , toAddress : 41c6600433381c731f22fc2b9f864b14fe518b322f }' Parameter fromAddress: Energy from address, default hexString Parameter toAddress: Energy to address, default hexString Return: Energy delegation information wallet/getdelegatedresourceaccountindex(Since Odyssey-v3.2) Description: Query the energy delegation index by an account demo: curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourceaccountindex -d '{ value : 419844f7600e018fd0d710e2145351d607b3316ce9 }' Parameter value: Address, default hexString Return: Energy delegation index wallet/getnodeinfo(Since Odyssey-v3.2) Description: Query the current node infromation demo: curl -X GET http://127.0.0.1:8090/wallet/getnodeinfo Parameter: No Parameter Return: The node information wallet/setaccountid Description: To set an account id for an account demo: curl -X POST http://127.0.0.1:8090/wallet/setaccountid -d '{ owner_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , account_id : 6161616162626262 }' Parameter owner_address: Owner address, default hexString Parameter account_id: Account id, default hexString Return: Transaction object wallet/getaccountbyid Description: Query an account information by account id demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountbyid -d '{ account_id : 6161616162626262 }' Parameter account_id: Account id, default hexString Return: Account object wallet/getdeferredtransactionbyid Description: Query the deferred transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/getdeferredtransactionbyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Deferred transaction object wallet/canceldeferredtransactionbyid Description: Query a deferred transaction by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/canceldeferredtransactionbyid -d '{ transactionId : 34e6b6497b71100756790a7f20cd729376768dd2bebb6a4a9c5e87b920d5de10 , ownerAddress : 41a7d8a35b260395c14aa456297662092ba3b76fc0 }' Parameter owner_address: Owner address of the transaction, default hexString Parameter transactionId: Transaction id Return: Transaction object wallet/getdeferredtransactioninfobyid Description: Query the deferred transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/getdeferredtransactioninfobyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Deferred transaction fee block height wallet/triggerconstantcontract Description: Trigger the constant of the smart contract, the transaction is off the blockchain demo: curl -X POST http://127.0.0.1:8090/wallet/triggerconstantcontract -d '{ contract_address : 4189139CB1387AF85E3D24E212A008AC974967E561 , function_selector : set(uint256,uint256) , parameter : 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 , fee_limit : 10, call_value : 100, owner_address : 41D1E7A6BC354106CB410E65FF8B181C600FF14292 }' Parameter contract_address: Smart contract address, defualt hexString Parameter function_selector: Function call, must not leave a blank space Parameter parameter: The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a hs tool provided by remix to convert a parameter like [1,2] to the format that VM requires Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter owner_address: Owner address that triggers the contract, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/clearabi Description: To clear the abi of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/clearabi -d '{ owner_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , contract_address : 417bcb781f4743afaacf9f9528f3ea903b3782339f }' Parameter owner_address: Owner address of the smart contract Parameter contract_address: Smart contract address, default hexString Return: Transaction object wallet/addtransactionsign Description: To sign the transaction of trigger constant contract demo: curl -X POST http://127.0.0.1:8090/wallet/addtransactionsign -d '{ owner_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , contract_address : 417bcb781f4743afaacf9f9528f3ea903b3782339f }' Parameter owner_address: Owner address of the smart contract Parameter contract_address: Smart contract address, default hexString Return: Transaction object after sign wallet/getsignweight Description: Query the current signatures total weight of a transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{ visible : true, signature : [ 36c9d227b9dd6b6f377d018bb2df784be884f28c743dc97edfdaa8bd64b2ffb058bca24a4eb8b4543a052a4f353fee8cb9e606ff739c74d22f9451c7a35c8f5200 ], txID : 4d928f7adfbad5c82f5b8518a6f7b7c5e459d06d1cb5306c61fad8a793587d2d , raw_data : { contract : [ { parameter : { value : { amount : 1000000, owner_address : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , to_address : TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW }, type_url : type.googleapis.com/protocol.TransferContract }, type : TransferContract , Permission_id : 2 } ], ref_block_bytes : 0380 , ref_block_hash : 6cdc8193f096be0f , expiration : 1556249055000, timestamp : 1556248995694 }, raw_data_hex : 0a02038022086cdc8193f096be0f40989eb0bda52d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d280270eeceacbda52d }' Parameter: Transaction object after sign Return: The current signatures total weight wallet/getapprovedlist Description: Query the signatures list of a transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{ visible : true, signature : [ 36c9d227b9dd6b6f377d018bb2df784be884f28c743dc97edfdaa8bd64b2ffb058bca24a4eb8b4543a052a4f353fee8cb9e606ff739c74d22f9451c7a35c8f5200 ], txID : 4d928f7adfbad5c82f5b8518a6f7b7c5e459d06d1cb5306c61fad8a793587d2d , raw_data : { contract : [ { parameter : { value : { amount : 1000000, owner_address : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , to_address : TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW }, type_url : type.googleapis.com/protocol.TransferContract }, type : TransferContract , Permission_id : 2 } ], ref_block_bytes : 0380 , ref_block_hash : 6cdc8193f096be0f , expiration : 1556249055000, timestamp : 1556248995694 }, raw_data_hex : 0a02038022086cdc8193f096be0f40989eb0bda52d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d280270eeceacbda52d }' Parameter: Transaction object after sign Return: The list of the signatures wallet/accountpermissionupdate Description: To set multi-signature for an account demo: curl -X POST http://127.0.0.1:8090/wallet/accountpermissionupdate -d '{ owner_address : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , owner : { type : 0, permission_name : owner , threshold : 1, keys : [ { address : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , weight : 1 } ] }, witness : { type : 1, permission_name : witness , threshold : 1, keys : [ { address : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , weight : 1 } ] }, actives : [ { type : 2, permission_name : active12323 , threshold : 2, operations : 7fff1fc0033e0000000000000000000000000000000000000000000000000000 , keys : [ { address : TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR , weight : 1 }, { address : TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP , weight : 1 } ] } ], visible : true }' Parameter owner_address: Owner address of the account, default hexString Parameter owner: Account owner permission Parameter witness: Account witness permission, only for witness Parameter actives: Operation permission Return: Transaction object wallet/getexpandedspendingkey Description: To get expanded spending keys from spending key demo: curl -X POST http://127.0.0.1:8090/wallet/getexpandedspendingkey -d '{ value : 06b02aaa00f230b0887ff57a6609d76691369972ac3ba568fe7a8a0897fce7c4 }' Parameter value: Spending key Return: Expanded spending keys wallet/getakfromask Description: To get ak key from ask key demo: curl -X POST http://127.0.0.1:8090/wallet/getakfromask -d '{ value : 653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604 }' Parameter value: Ask key Return: Ak key wallet/getnkfromnsk Description: To get nk key from nsk key demo: curl -X POST http://127.0.0.1:8090/wallet/getnkfromnsk -d '{ value : 428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01 }' Parameter value: Nsk key Return: Nk key wallet/getspendingkey Description: To get spending key demo: curl -X GET http://127.0.0.1:8090/wallet/getspendingkey Parameter: No Parameter Return: Spending key wallet/getdiversifier Description: To get diversifier demo: curl -X GET http://127.0.0.1:8090/wallet/getdiversifier Parameter: No Parameter Return: Diversifier wallet/getincomingviewingkey Description: To get incoming viewing key demo: curl -X POST http://127.0.0.1:8090/wallet/getincomingviewingkey -d '{ ak : b443f1a303ef5837ba95750b48b6fef15f9c77f63a8c28c161bcd6613f423b5c , nk : 632137e69179df3d10e252fcce85d13464c3163fe7a619edf8d43ebefa8162d9 }' Parameter ak: Ak Parameter nk: Nk Return: Incoming viewing key wallet/getzenpaymentaddress Description: To get payment address demo: curl -X POST http://127.0.0.1:8090/wallet/getzenpaymentaddress -d '{ ivk : 8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03 , d : 736ba8692ed88a5473e009 }' Parameter ivk: Ivk Parameter d: D Return: Payment address wallet/createshieldedtransactionwithoutspendauthsig Description: To create shielded transaction without using ask demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ ivk : 8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03 , d : 736ba8692ed88a5473e009 }' Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ask: Ask Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object wallet/createshieldedtransactionwithoutspendauthsig Description: To create shielded transaction without using ask demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ ak : bf051629fd8122cd9dd8591d72947b026c214cf7cdac1f68eff97179727d38e9 , nsk : 42963d26af8122204273fa3489d9efd6babf1f7179ff193c955a1f3d9c2df10c , ovk : bc9848a83966709655b12efadc9e978785858316045e0115a0e72567a9a2a823 , shielded_spends : [ { note : { value : 500000000, payment_address : ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02 , rcm : 723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e }, alpha : 2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04 , voucher : { tree : { left : { content : a3d5c9b2db9699f32afec5febbd5586ce9ff33a0bef6fee5691028313b8e1f6a }, parents : [ { content : d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae548 }, { content : d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae15 } ] }, rt : fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565 }, path : 2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae1520d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae5482001000000000000000000000000000000000000000000000000000000000000000600000000000000 } ], shielded_receives : [ { note : { value : 40000000, payment_address : ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr , rcm : ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03 } } ] }' Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ak: Ak Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object wallet/scannotebyivk Description: To get all the notes by ivk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyivk -d '{ startNum : 0, endNum : 100000, ivk : 80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05 }' Parameter startNum: The start block height Parameter endNum: The end block height Parameter ivk: Incoming viewing key Return: Notes list wallet/scannotebyovk Description: To get all the notes by ovk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyovk -d '{ startNum : 0, endNum : 100000, ovk : 705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539 }' Parameter startNum: The start block height Parameter endNum: The end block height Parameter ovk: Outgoing viewing key Return: Notes list wallet/getrcm Description: To get a random commitment trapdoor demo: curl -X GET http://127.0.0.1:8090/wallet/getrcm Parameter: No Parameter Return: A random commitment trapdoor wallet/getmerkletreevoucherinfo Description: To get a merkle tree infromation of a note demo: curl -X POST http://127.0.0.1:8090/wallet/getmerkletreevoucherinfo -d '{ out_points :[{ hash : 185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74 , index :0 }] }' Parameter out_points: Note information Return: A merkle tree of a note wallet/isspend Description: To check whether a note is spent or not demo: curl -X POST http://127.0.0.1:8090/wallet/isspend -d '{ ak : a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129 , nk : 62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e , note : { payment_address : ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq , rcm : 74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a , value : 500000000 }, voucher : { tree : { left : { content : a4d763fae3fee78964ccdf7567ec3062c95a5b97825d731202d3dfa6cb01c143 } }, rt : 7dc3652c2a16e8518a8be0e3e038f9d28c3eb96f13e8da8acc2a9b650702f33e } }' Parameter ak: Ak key Parameter nk: Nk key Parameter note: Note information Parameter voucher: Voucher information Return: Note status wallet/createspendauthsig Description: To create a signature for a transaction demo: curl -X POST http://127.0.0.1:8090/wallet/createspendauthsig -d '{ ask : e3ebcba1531f6d9158d9c162660c5d7c04dadf77d85d7436a9c98b291ff69a09 , tx_hash : 3b78fee6e956f915ffe082284c5f18640edca9c57a5f227e5f7d7eb65ad61502 , alpha : 2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04 }' Parameter ask: Ask key Parameter tx_hash: Transaction hash Parameter alpha: Alpha Return: A signature wallet/createshieldnullifier Description: To create a shielded nullifier demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldnullifier -d '{ note : { payment_address : ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq , rcm : 74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a , value : 500000000 }, voucher : { tree : { left : { content : a4d763fae3fee78964ccdf7567ec3062c95a5b97825d731202d3dfa6cb01c143 } }, rt : 7dc3652c2a16e8518a8be0e3e038f9d28c3eb96f13e8da8acc2a9b650702f33e }, ak : a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129 , nk : 62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e }' Parameter note: Note information Parameter voucher: Voucher information Parameter ak: Ak Parameter nk: Nk Return: A shielded nullifier wallet/getshieldtransactionhash Description: To get a shielded transaction hash demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldnullifier -d '{ txID : de639a64497d86bb27e34a2953093a0cc488ec4c7bc9624ac5857d3799748595 , raw_data : { contract : [ { parameter : { value : { binding_signature : 2b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b , spend_description : [ { value_commitment : cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a869 , anchor : fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565 , nullifier : 93e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35 , rk : 10c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d16 , zkproof : abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b1 } ], receive_description : [ { value_commitment : f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a , note_commitment : ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e , epk : 719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e6 , c_enc : 3a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f , c_out : 50be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da , zkproof : a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a80 } ] }, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract } ], ref_block_bytes : 0d59 , ref_block_hash : 7356ce5c35d8265e , expiration : 1559237283000, timestamp : 1559201285590 }, raw_data_hex : 0a020d5922087356ce5c35d8265e40b899a3ceb02d5a940b0833128f0b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412d50a1acb020a20cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a8691220fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c285651a2093e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35222010c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d162ac001abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b122c2070a20f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a1220ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e1a20719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e622c4043a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f2a5050be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da32c001a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a802a402b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b70d68b8ebdb02d }' Parameter transaction: Transaction object Return: a shielded transaction hash wallet/createshieldedtransaction Description: To create shielded transaction Please refer to: demo Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ask: Ask Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object","title":"TRON Http Api"},{"location":"Tron-http/#hexstring-and-base58check-transcode-demo","text":"JAVA: https://github.com/tronprotocol/wallet-cli/blob/master/src/main/java/org/tron/demo/TransactionSignDemo.java#L92 PHP: https://github.com/tronprotocol/Documentation/blob/master/TRX_CN/index.php Since v3.6, parameter 'visible' is added, when 'visible' is set true, no need to transcode the relevant address and string. This parameter is valid for all api, including solidityNode api and FullNode api. When 'visible' is set true, the format of the input address must be base58, input string must text string, so does the format of the output. If 'visible' is set false or null, the api acts the same as previous version. If the format of the parameters do not match with the set of visible, it will throw out an error. Way to set the 'visible' parameter: 1. For the api needs no parameter: by adding 'visible' parameter in the url example: http://127.0.0.1:8090/wallet/listexchanges?visible=true 2. For POST method api: By adding 'visible' parameter to the most out layer of the json example: curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d '{ owner_address_ : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , to_address_ : TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW , amount : 1000000, visible : true }' 3. For GET method api: By adding 'visible' parameter in the url, as way 1","title":"HexString and Base58check Transcode Demo"},{"location":"Tron-http/#soliditynode-api-introduction","text":"SolidityNode api's default http port is 8091, when solidityNode is started, http service will be started too. /walletsolidity/getaccount Description: Query an account information demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getaccount -d '{ address : 41E552F6487585C2B58BC2C9BB4492BC1F17132CD0 }' Parameter address: Default hexString Return: Account object walletsolidity/listwitnesses Description: Qyery the list of the witnesses demo: curl -X GET http://127.0.0.1:8091/walletsolidity/listwitnesses Parameter: No parameter Return: The list of all the witnesses /walletsolidity/getassetissuelist Description: Query the list of all the tokens demo: curl -X GET http://127.0.0.1:8091/walletsolidity/getassetissuelist Parameter: No parameter Return: The list of all the tokens /walletsolidity/getpaginatedassetissuelist Description: Query the list of all the tokens by pagination demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getpaginatedassetissuelist -d '{ offset : 0, limit : 10 }' Parameter offset: the index of the start token Parameter limit: the amount of tokens per page Return: The list of tokens by pagination /walletsolidity/getassetissuebyname(Since Odyssey-v3.2) Description: Query a token by token name demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyname -d '{ value : 44756354616E }' Parameter value: Token name, default hexString Return: Token object Note: Since Odyssey-v3.2, getassetissuebyid or getassetissuelistbyname is recommended, as since v3.2, token name can be repeatable. If the token name you query is not unique, this api will throw out an error /walletsolidity/getassetissuelistbyname(Since Odyssey-v3.2) Description: Query the list of tokens by name demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuelistbyname -d '{ value : 44756354616E }' Parameter value: Token name, default hexString Return: The list of tokens /walletsolidity/getassetissuebyid(Since Odyssey-v3.2) Description: Query a token by token id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyid -d '{ value : 1000001 }' Parameter value: Token id Return: Token object /walletsolidity/getnowblock Description: Query the latest block information demo: curl -X GET http://127.0.0.1:8091/walletsolidity/getnowblock Parameter: No parameter Return: the latest block from solidityNode /walletsolidity/getblockbynum Description: Query a block information by block height demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbynum -d '{ num : 100 }' Parameter num: Block height Return: Block information /walletsolidity/gettransactionbyid Description: Query an transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactionbyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Transaction information /walletsolidity/gettransactioncountbyblocknum(Since Odyssey-v3.2) Description: Query th the number of transactions in a specific block demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioncountbyblocknum -d '{ num : 100 }' Parameter num: Block height Return: The number of transactions /walletsolidity/gettransactioninfobyid Description: Query the transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioninfobyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Transaction fee block height /walletsolidity/getdelegatedresource(Since Odyssey-v3.2) Description: Query the energy delegation information demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresource -d '{ fromAddress : 419844f7600e018fd0d710e2145351d607b3316ce9 , toAddress : 41c6600433381c731f22fc2b9f864b14fe518b322f }' Parameter fromAddress: Energy from address, default hexString Parameter toAddress: Energy to address, default hexString Return: Energy delegation information /walletsolidity/getdelegatedresourceaccountindex(Since Odyssey-v3.2) Description: Query the energy delegation index by an account demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresourceaccountindex -d '{ value : 419844f7600e018fd0d710e2145351d607b3316ce9 }' Parameter value: Address, default hexString Return: Energy delegation index /walletsolidity/getexchangebyid(Since Odyssey-v3.2) Description: Query an exchange pair by exchange pair id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getexchangebyid -d '{ id : 1 }' Parameter id: Exchange pair id Return: Exchange pair object /walletsolidity/listexchanges(Since Odyssey-v3.2) Description: Query the list of all the exchange pairs demo: curl -X GET http://127.0.0.1:8091/walletsolidity/listexchanges Parameter: No parameter Return: The list of all the exchange pairs /walletsolidity/getaccountbyid Description: Query an account information by account id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getaccountbyid -d '{ account_id : 6161616162626262 }' Parameter account_id: Account id, default hexString Return: Account object /walletsolidity/getblockbyid Description: Query a block information by block id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbyid-d '{ value : 0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73 }' Parameter value: Block id Return: Block object /walletsolidity/getblockbylimitnext Description: Query a list of blocks by range demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylimitnext -d '{ startNum : 1, endNum : 2 }' Parameter startNum: The start block height, itself included Parameter endNum: The end block height, itself not included Return: The list of the blocks /walletsolidity/getblockbylatestnum Description: Query the several latest blocks demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylatestnum -d '{ num : 5 }' Parameter num: The number of the blocks expected to return Return: The list of the blocks /walletextension/gettransactionsfromthis\uff08No longer supported in the latest version\uff09 Description: Query the transactions initiated by an account demo: curl -X POST http://127.0.0.1:8091/walletextension/gettransactionsfromthis -d '{ account : { address : 41E552F6487585C2B58BC2C9BB4492BC1F17132CD0 }, offset : 0, limit : 10, startTime : 1546099200000, endTime : 1552028828000 }' Parameter address: Address, default hexString Parameter offset: The start index of the transactions, must not greater then 10000 Parameter limit: The number of transactions expected to return, maximum 50, offset+limit must smaller than 10000 Parameter startTime: Query start time Parameter endTime: Query end time, Default latest 7 days Return: The list of transactions Note: This api is no longer supported in the latest version, you can use the central node api: 47.90.247.237:8091/walletextension/gettransactionsfromthis /walletextension/gettransactionstothis\uff08No longer supported in the latest version\uff09 Description: Query the transactions received by an account demo: curl -X POST http://127.0.0.1:8091/walletextension/gettransactionstothis -d '{ account : { address : 41E552F6487585C2B58BC2C9BB4492BC1F17132CD0 }, offset : 0, limit : 10, startTime : 1546099200000, endTime : 1552028828000 }' Parameter address: Address, default hexString Parameter offset: The start index of the transactions, must not greater then 10000 Parameter limit: The number of transactions expected to return, maximum 50, offset+limit must smaller than 10000 Parameter startTime: Query start time Parameter endTime: Query end time, Default latest 7 days Return: The list of transactions Note: This api is no longer supported in the latest version, you can use the central node api: 47.90.247.237:8091/walletextension/gettransactionstothis /wallet/getnodeinfo(Since Odyssey-v3.2) Description: Query the current node infromation demo: curl -X GET http://127.0.0.1:8091/wallet/getnodeinfo Parameter: No parameter Return: The node information /walletsolidity/getdeferredtransactionbyid Description: Query the deferred transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdeferredtransactionbyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: transaction id Return: Deferred transaction object /walletsolidity/getdeferredtransactioninfobyid Description: Query the deferred transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdeferredtransactioninfobyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: transaction id Return: Deferred transaction fee block height /walletsolidity/getmerkletreevoucherinfo Description: To get a merkle tree infromation of a note demo: curl -X POST http://127.0.0.1:8090/wallet/getmerkletreevoucherinfo -d '{ out_points :[{ hash : 185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74 , index :0 }] }' Parameter out_points: Note information Return: A merkle tree of a note /walletsolidity/scannotebyivk Description: To get all the notes by ivk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyivk -d '{ startNum : 0, endNum : 100000, ivk : 80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05 }' Parameter startNum: The start block height Parameter endNum: The end block height Parameter ivk: Incoming viewing key Return: Notes list /walletsolidity/scannotebyovk Description: To get all the notes by ovk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyovk -d '{ startNum : 0, endNum : 100000, ovk : 705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539 }' Parameter startNum: The start block height Parameter endNum: The end block height Parameter ovk: Outgoing viewing key Return: Notes list /walletsolidity/isspend Description: To check whether a note is spent or not demo: curl -X POST http://127.0.0.1:8090/wallet/isspend -d '{ ak : a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129 , nk : 62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e , note : { payment_address : ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq , rcm : 74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a , value : 500000000 }, voucher : { tree : { left : { content : a4d763fae3fee78964ccdf7567ec3062c95a5b97825d731202d3dfa6cb01c143 } }, rt : 7dc3652c2a16e8518a8be0e3e038f9d28c3eb96f13e8da8acc2a9b650702f33e } }' Parameter ak: Ak key Parameter nk: Nk key Parameter note: Note information Parameter voucher: Voucher information Return: Note status","title":"SolidityNode Api Introduction"},{"location":"Tron-http/#fullnode-api-introduction","text":"FullNode api's default http port is 8090, when FullNode is started, http service will be started too. wallet/createtransaction Description: Create a transfer transaction, if to address is not existed, then create the account on the blockchain demo: curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d '{ to_address : 41e9d79cc47518930bc322d9bf7cddd260a0260a8d , owner_address : 41D1E7A6BC354106CB410E65FF8B181C600FF14292 , amount : 1000 }' Parameter to_address: To address, default hexString Parameter owner_address: Owner address, default hexString Parameter amount: Transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/gettransactionsign Description: To sign a transaction demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactionsign -d '{ transaction : { txID : 454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8 , raw_data : { contract : [ { parameter : { value : { amount : 1000, owner_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , to_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 }, type_url : type.googleapis.com/protocol.TransferContract }, type : TransferContract } ], ref_block_bytes : 267e , ref_block_hash : 9a447d222e8de9f2 , expiration : 1530893064000, timestamp : 1530893006233 } }, privateKey : your private key }' Parameter transaction: Transaction object Parameter privateKey: Private key Return: Transaction after sign Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/broadcasttransaction Description: Broadcast transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/broadcasttransaction -d '{ signature : [ 97c825b41c77de2a8bd65b3df55cd4c0df59c307c0187e42321dcc1cc455ddba583dd9502e17cfec5945b34cad0511985a6165999092a6dec84c2bdd97e649fc01 ], txID : 454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8 , raw_data : { contract : [ { parameter : { value : { amount : 1000, owner_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , to_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 }, type_url : type.googleapis.com/protocol.TransferContract }, type : TransferContract } ], ref_block_bytes : 267e , ref_block_hash : 9a447d222e8de9f2 , expiration : 1530893064000, timestamp : 1530893006233 } }' Parameter: Transaction after sign Return: The result of the broadcast wallet/broadcasthex Description: Broadcast transaction hex string after sign demo: curl -X POST http://127.0.0.1:8090/wallet/broadcasthex -d '{ transaction : 0A8A010A0202DB2208C89D4811359A28004098A4E0A6B52D5A730802126F0A32747970652E676F6F676C65617069732E636F6D2F70726F746F636F6C2E5472616E736665724173736574436F6E747261637412390A07313030303030311215415A523B449890854C8FC460AB602DF9F31FE4293F1A15416B0580DA195542DDABE288FEC436C7D5AF769D24206412418BF3F2E492ED443607910EA9EF0A7EF79728DAAAAC0EE2BA6CB87DA38366DF9AC4ADE54B2912C1DEB0EE6666B86A07A6C7DF68F1F9DA171EEE6A370B3CA9CBBB00 }' Parameter: Transaction hex after sign Return: The result of the broadcast wallet/updateaccount Description: Update the name of an account demo: curl -X POST http://127.0.0.1:8090/wallet/updateaccount -d '{ account_name : 0x7570646174654e616d6531353330383933343635353139 , owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 }' Parameter account_name: Account name, default hexString Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/votewitnessaccount Description: Vote for witnesses demo: curl -X POST http://127.0.0.1:8090/wallet/votewitnessaccount -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , votes : [ { vote_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , vote_count : 5 } ] }' Parameter owner_address: Owner address, default hexString Parameter votes: 'vote_address' stands for the address of the witness you want to vote, default hexString, 'vote_count' stands for the number of votes you want to vote Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ owner_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , name : 0x6173736574497373756531353330383934333132313538 , abbr : 0x6162627231353330383934333132313538 , total_supply : 4321, trx_num : 1, num : 1, start_time : 1530894315158, end_time : 1533894312158, description : 007570646174654e616d6531353330363038383733343633 , url : 007570646174654e616d6531353330363038383733343633 , free_asset_net_limit : 10000, public_free_asset_net_limit : 10000, frozen_supply : { frozen_amount : 1, frozen_days : 2 } }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter frozen_supply: Token frozen supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN wallet/updatewitness Description: Update the witness' website url demo: curl -X POST http://127.0.0.1:8090/wallet/updatewitness -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , update_url : 007570646174654e616d6531353330363038383733343633 }' Parameter owner_address: Owner address, default hexString Parameter update_url: Website url, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/createaccount Description: Create an account demo: curl -X POST http://127.0.0.1:8090/wallet/createaccount -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , account_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 }' Parameter owner_address: Owner address, default hexString Parameter account_address: New address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: It costs 0.1 TRX wallet/createwitness Description: Apply to become a witness demo: curl -X POST http://127.0.0.1:8090/wallet/createwitness -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , url : 007570646174654e616d6531353330363038383733343633 }' Parameter owner_address: Owner address, default hexString Parameter url: Website url, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , to_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , asset_name : 31303030303031 , amount : 100 }' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token wallet/easytransfer Description: Easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransfer -d '{ passPhrase : your password , toAddress : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , amount : 100 }' Parameter passPhrase: Password, default hexString Parameter toAddress: To address, default hexString Parameter amount: Transfer TRX amount Return: Transaction object the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/easytransferasset Description: Easy token transfer demo\uff1acurl -X POST http://127.0.0.1:8090/wallet/easytransferasset -d '{ passPhrase : your password , toAddress : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , assetId : 1000001 , amount : 100 }' Parameter passPhrase: Password, default hexString Parameter toAddress: To address, default hexString Parameter assetId: Token id Parameter amount: Transfer token amount Return: Transaction object the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network The unit of 'amount' is the smallest unit of the token wallet/createaddress Description: Create an address with a password demo: curl -X POST http://127.0.0.1:8090/wallet/createaddress -d '{ value : 3230313271756265696a696e67 }' Parameter value: Password, default hexString Return: An address Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ to_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 , amount : 100, asset_name : 3230313271756265696a696e67 }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token wallet/freezebalance Description: Freeze TRX demo: curl -X POST http://127.0.0.1:8090/wallet/freezebalance -d '{ owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 , frozen_balance : 10000, frozen_duration : 3, resource : BANDWIDTH , receiveraddress : 414332f387585c2b58bc2c9bb4492bc1f17342cd1 }' Parameter owner_address: Owner address, default hexString Parameter frozen_balance: TRX freeze amount Parameter frozen_duration: TRX freeze duration, at least 3 days Parameter resource: TRX freeze type, 'BANDWIDTH' or 'ENERGY' Parameter receiverAddress: The address that will receive the resource, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/unfreezebalance Description: Unfreeze the frozen TRX that is due demo: curl -X POST http://127.0.0.1:8090/wallet/unfreezebalance -d '{ owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 , resource : BANDWIDTH , receiveraddress : 414332f387585c2b58bc2c9bb4492bc1f17342cd1 }' Parameter owner_address: Owner address, default hexString Parameter resource: Frozen TRX unfreeze type 'BANDWIDTH' or 'ENERGY' Parameter receiverAddress: The address that will lose the resource, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/unfreezeasset Description: Unfreeze the frozen token that is due demo: curl -X POST http://127.0.0.1:8090/wallet/unfreezeasset -d '{ owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 }' Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/withdrawbalance Description: Withdraw reward to account balance for witnesses demo: curl -X POST http://127.0.0.1:8090/wallet/withdrawbalance -d '{ owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 }' Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: It can only withdraw once for every 24 hours wallet/updateasset Description: Update token information demo: curl -X POST http://127.0.0.1:8090/wallet/updateasset -d '{ owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 , description : , url : , new_limit : 1000000, new_public_limit : 100 }' Parameter owner_address: The issuers address of the token, default hexString Parameter description: The description of token, default hexString Parameter url: The token's website url, default hexString Parameter new_limit: Each token holder's free bandwidth Parameter new_public_limit: The total free bandwidth of the token Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/listnodes Description: Query the list of nodes connected to the ip of the api demo: curl -X GET http://127.0.0.1:8090/wallet/listnodes Parameter: No parameter Return: The list of nodes wallet/getassetissuebyaccount Description: Query the token issue information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyaccount -d '{ address : 41F9395ED64A6E1D4ED37CD17C75A1D247223CAF2D }' Parameter address: Token issuer's address, default hexString Return: Token object wallet/getaccountnet Description: Query the bandwidth information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountnet -d '{ address : 4112E621D5577311998708F4D7B9F71F86DAE138B5 }' Parameter address: Address, default hexString Return: Bandwidth information wallet/getassetissuebyname Description: Query a token by token name demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyname -d '{ value : 44756354616E }' Parameter value: Token name, default hexString Return: Token object Note: Since Odyssey-v3.2, getassetissuebyid or getassetissuelistbyname is recommended, as since v3.2, token name can be repeatable. If the token name you query is not unique, this api will throw out an error wallet/getassetissuelistbyname(Since Odyssey-v3.2) Description: Query the list of tokens by name demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuelistbyname -d '{ value : 44756354616E }' Parameter value: Token name, default hexString Return: The list of tokens wallet/getassetissuebyid(Since Odyssey-v3.2) Description: Query a token by token id demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyid -d '{ value : 1000001 }' Parameter value: Token id Return: Token object wallet/getnowblock Description: Query the latest block information demo: curl -X GET http://127.0.0.1:8090/wallet/getnowblock Parameter: No parameter Return: The latest block wallet/getblockbynum Description: Query a block information by block height demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbynum -d '{ num : 1 }' Parameter num: Block height Return: Block information wallet/getblockbyid Description: Query a block information by block id demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbyid-d '{ value : 0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73 }' Parameter value: Block id Return: Block object wallet/getblockbylimitnext Description: Query a list of blocks by range demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbylimitnext -d '{ startNum : 1, endNum : 2 }' Parameter startNum: The start block height, itself included Parameter endNum: The end block height, itself not included Return: The list of the blocks wallet/getblockbylatestnum Description: Query the several latest blocks demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbylatestnum -d '{ num : 5 }' Parameter num: The number of the blocks expected to return Return: The list of the blocks wallet/gettransactionbyid Description: Query an transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactionbyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Transaction information wallet/gettransactioninfobyid(Since Odyssey-v3.2) Description: Query the transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactioninfobyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Transaction fee block height wallet/gettransactioncountbyblocknum(Since Odyssey-v3.2) Description: Query th the number of transactions in a specific block demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactioncountbyblocknum -d '{ num : 100 }' Parameter num: Block height Return: The number of transactions wallet/getaccount Description: Query an account information demo: curl -X POST http://127.0.0.1:8090/wallet/getaccount -d '{ address : 41E552F6487585C2B58BC2C9BB4492BC1F17132CD0 }' Parameter address: Default hexString Return: Account object wallet/listwitnesses Description: Qyery the list of the witnesses demo: curl -X GET http://127.0.0.1:8090/wallet/listwitnesses Parameter: No parameter Return: The list of all the witnesses wallet/getassetissuelist Description: Query the list of all the tokens demo: curl -X GET http://127.0.0.1:8090/wallet/getassetissuelist Parameter: No parameter Return: The list of all the tokens wallet/getpaginatedassetissuelist Description: Query the list of all the tokens by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedassetissuelist -d '{ offset : 0, limit : 10 }' Parameter offset: The index of the start token Parameter limit: The amount of tokens per page Return: The list of tokens by pagination wallet/getpaginatedproposallist(Since Odyssey-v3.5) Description: Query the list of all the proposals by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedproposallist -d '{ offset : 0, limit : 10 }' Parameter offset: The index of the start proposal Parameter limit: The amount of proposals per page Return: The list of proposals by pagination wallet/getpaginatedexchangelist(Odyssey-v3.2\u5f00\u59cb\u652f\u6301) Description: Query the list of all the exchange pairs by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedexchangelist -d '{ offset : 0, limit : 10 }' Parameter offset: The index of the start exchange pair Parameter limit: The amount of exchange pairs per page Return: The list of exchange pairs by pagination wallet/totaltransaction Description: Query the total transactions number demo: curl -X GET http://127.0.0.1:8090/wallet/totaltransaction Parameter: No parameter Return: Total transaction number wallet/getnextmaintenancetime Description: Query the time interval till the next vote round demo: curl -X GET http://127.0.0.1:8090/wallet/getnextmaintenancetime Parameter: No parameter Return: The time interval till the next vote round(unit: ms) wallet/easytransferbyprivate Description: TRX Easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransferbyprivate -d '{ privateKey : D95611A9AF2A2A45359106222ED1AFED48853D9A44DEFF8DC7913F5CBA727366 , toAddress : 4112E621D5577311998708F4D7B9F71F86DAE138B5 , amount : 10000 }' Parameter privateKey: Private key, default hexString Parameter toAddress: To address, default hexString Parameter amount: TRX transfer amount Return: Transaction object the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/easytransferassetbyprivate Description: Token easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransferassetbyprivate -d '{ privateKey : D95611A9AF2A2A45359106222ED1AFED48853D9A44DEFF8DC7913F5CBA727366 , toAddress : 4112E621D5577311998708F4D7B9F71F86DAE138B5 , assetId : 1000001 , amount : 10000 }' Parameter privateKey: Private key, default hexString Parameter toAddress: To address, default hexString Parameter assetId: Token id Parameter amount: Token transfer amount Return: Transaction object the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network The unit of 'amount' is the smallest unit of the token wallet/generateaddress Description: Generate address and private key demo: curl -X GET http://127.0.0.1:8090/wallet/generateaddress Parameter: No parameter Return: Address and private key Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/validateaddress Description: Check the validity of the address demo: curl -X POST http://127.0.0.1:8090/wallet/validateaddress -d '{ address : 4189139CB1387AF85E3D24E212A008AC974967E561 }' Return: The check result wallet/deploycontract Description: Deploy a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/deploycontract -d '{ abi : [{\\ constant\\ :false,\\ inputs\\ :[{\\ name\\ :\\ key\\ ,\\ type\\ :\\ uint256\\ },{\\ name\\ :\\ value\\ ,\\ type\\ :\\ uint256\\ }],\\ name\\ :\\ set\\ ,\\ outputs\\ :[],\\ payable\\ :false,\\ stateMutability\\ :\\ nonpayable\\ ,\\ type\\ :\\ function\\ },{\\ constant\\ :true,\\ inputs\\ :[{\\ name\\ :\\ key\\ ,\\ type\\ :\\ uint256\\ }],\\ name\\ :\\ get\\ ,\\ outputs\\ :[{\\ name\\ :\\ value\\ ,\\ type\\ :\\ uint256\\ }],\\ payable\\ :false,\\ stateMutability\\ :\\ view\\ ,\\ type\\ :\\ function\\ }] , bytecode : 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 , parameter : , call_value : 100, name : SomeContract , consume_user_resource_percent : 30, fee_limit : 10, origin_energy_limit : 10, owner_address : 41D1E7A6BC354106CB410E65FF8B181C600FF14292 }' Parameter abi: Abi Parameter bytecode: Bytecode, default hexString Parameter parameter: The list of the parameters of the constructor, It should be converted hexString after encoded according to ABI encoder. If constructor has no parameter, this can be optional Parameter consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter call_token_value: The amount of trc10 token transfer to the contract for each call (Optional) Parameter token_id: The id of trc10 token transfer to the contract (Optional) Parameter owner_address: Owner address of the contract, default hexString Parameter name: Contract name Parameter origin_energy_limit: The maximum resource consumption of the creator in one execution or creation Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/triggersmartcontract Description: Trigger smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/triggersmartcontract -d '{ contract_address : 4189139CB1387AF85E3D24E212A008AC974967E561 , function_selector : set(uint256,uint256) , parameter : 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 , fee_limit : 10, call_value : 100, owner_address : 41D1E7A6BC354106CB410E65FF8B181C600FF14292 }' Parameter contract_address: Contract address, default hexString Parameter function_selector: Function call, must not leave a blank space Parameter parameter: The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a js tool provided by remix to convert a parameter like [1,2] to the format that VM requires Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter call_token_value: The amount of trc10 token transfer to the contract for each call Parameter token_id: The id of trc10 token transfer to the contract Parameter owner_address: Owner address that triggers the contract, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/getcontract Description: Query a contract demo: curl -X POST http://127.0.0.1:8090/wallet/getcontract -d '{ value : 4189139CB1387AF85E3D24E212A008AC974967E561 }' Parameter value: Contract address, default hexString Return: Smart contract object wallet/proposalcreate Description: Create a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposalcreate -d '{ owner_address : 419844F7600E018FD0D710E2145351D607B3316CE9 , parameters : [ { key : 0, value : 100000 }, { key : 1, value : 2 } ] }' Parameter owner_address: Creator address Parameter parameters: Proposal parameters Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getproposalbyid Description: Query a proposal by proposal id demo: curl -X POST http://127.0.0.1:8090/wallet/getproposalbyid -d '{ id : 1 }' Parameter id: Proposal id Return: The proposal information wallet/listproposals Description: Query all the proposals demo: curl -X POST http://127.0.0.1:8090/wallet/listproposals Parameter: No parameter Return: The list of all the proposals wallet/proposalapprove Description: To approve a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposalapprove -d '{ owner_address : 419844F7600E018FD0D710E2145351D607B3316CE9 , proposal_id : 1, is_add_approval : true }' Parameter owner_address: The address that makes the approve action, default hexString Parameter proposal_id: Proposal id Parameter is_add_approval: Whether to approve Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/proposaldelete Description: To delete a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposaldelete -d '{ owner_address : 419844F7600E018FD0D710E2145351D607B3316CE9 , proposal_id : 1 }' Parameter owner_address: Owner address of the proposal, default hexString Parameter proposal_id: Proposal id Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getaccountresource Description: Query the resource information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountresource -d '{ address : 419844f7600e018fd0d710e2145351d607b3316ce9 }' Parameter address: Address, default hexString Return: The resource information wallet/exchangecreate Description: Create an exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangecreate -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , first_token_id : token_a , first_token_balance : 100, second_token_id : token_b , second_token_balance : 200 }' Parameter first_token_id: The first token's id, default hexString Parameter first_token_balance: The first token's balance Parameter second_token_id: The second token's id, default hexString Parameter second_token_balance: The second token's balance Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'first_token_balance' and 'second_token_balance' is the smallest unit of the token wallet/exchangeinject Description: Inject funds for exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangeinject -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , exchange_id : 1, token_id : 74726f6e6e616d65 , quant : 100 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Token inject amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token wallet/exchangewithdraw Description: Withdraw from exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangewithdraw -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , exchange_id : 1, token_id : 74726f6e6e616d65 , quant : 100 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Token withdraw amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token wallet/exchangetransaction Description: Participate the transaction of exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangetransaction -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , exchange_id : 1, token_id : 74726f6e6e616d65 , quant : 100, expected : 10 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Sell token amount Parameter expected: Expected token amount to get Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' and 'expected' is the smallest unit of the token wallet/getexchangebyid Description: Query an exchange pair by exchange pair id demo: curl -X POST http://127.0.0.1:8090/wallet/getexchangebyid -d '{ id : 1 }' Parameter id: Exchange pair id Return: Exchange pair information wallet/listexchanges Description: Query the list of all the exchange pairs demo: curl -X GET http://127.0.0.1:8090/wallet/listexchanges Parameter: No parameter Return: The list of all the exchange pairs wallet/getchainparameters Description: Query the parameters of the blockchain used for witnessses to create a proposal demo: curl -X GET http://127.0.0.1:8090/wallet/getchainparameters Parameter: No parameter Return: The list of parameters of the blockchain wallet/updatesetting Description: Update the consume_user_resource_percent parameter of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/updatesetting -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , contract_address : 41c6600433381c731f22fc2b9f864b14fe518b322f , consume_user_resource_percent : 7 }' Parameter owner_address: Owner address of the smart contract, default hexString Parameter contract_address: Smart contract address, default hexString Parameter consume_user_resource_percent: Consume user's resource percentage Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/updateenergylimit Description: Update the origin_energy_limit parameter of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/updatesetting -d '{ owner_address : 419844f7600e018fd0d710e2145351d607b3316ce9 , contract_address : 41c6600433381c731f22fc2b9f864b14fe518b322f , origin_energy_limit : 7 }' Parameter owner_address: Owner address of the smart contract, default hexString Parameter contract_address: Smart contract address, default hexString Parameter origin_energy_limit: The maximum resource consumption of the creator in one execution or creation Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getdelegatedresource(Since Odyssey-v3.2) Description: Query the energy delegation information demo: curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresource -d '{ fromAddress : 419844f7600e018fd0d710e2145351d607b3316ce9 , toAddress : 41c6600433381c731f22fc2b9f864b14fe518b322f }' Parameter fromAddress: Energy from address, default hexString Parameter toAddress: Energy to address, default hexString Return: Energy delegation information wallet/getdelegatedresourceaccountindex(Since Odyssey-v3.2) Description: Query the energy delegation index by an account demo: curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourceaccountindex -d '{ value : 419844f7600e018fd0d710e2145351d607b3316ce9 }' Parameter value: Address, default hexString Return: Energy delegation index wallet/getnodeinfo(Since Odyssey-v3.2) Description: Query the current node infromation demo: curl -X GET http://127.0.0.1:8090/wallet/getnodeinfo Parameter: No Parameter Return: The node information wallet/setaccountid Description: To set an account id for an account demo: curl -X POST http://127.0.0.1:8090/wallet/setaccountid -d '{ owner_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , account_id : 6161616162626262 }' Parameter owner_address: Owner address, default hexString Parameter account_id: Account id, default hexString Return: Transaction object wallet/getaccountbyid Description: Query an account information by account id demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountbyid -d '{ account_id : 6161616162626262 }' Parameter account_id: Account id, default hexString Return: Account object wallet/getdeferredtransactionbyid Description: Query the deferred transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/getdeferredtransactionbyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Deferred transaction object wallet/canceldeferredtransactionbyid Description: Query a deferred transaction by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/canceldeferredtransactionbyid -d '{ transactionId : 34e6b6497b71100756790a7f20cd729376768dd2bebb6a4a9c5e87b920d5de10 , ownerAddress : 41a7d8a35b260395c14aa456297662092ba3b76fc0 }' Parameter owner_address: Owner address of the transaction, default hexString Parameter transactionId: Transaction id Return: Transaction object wallet/getdeferredtransactioninfobyid Description: Query the deferred transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/getdeferredtransactioninfobyid -d '{ value : 309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2 }' Parameter value: Transaction id Return: Deferred transaction fee block height wallet/triggerconstantcontract Description: Trigger the constant of the smart contract, the transaction is off the blockchain demo: curl -X POST http://127.0.0.1:8090/wallet/triggerconstantcontract -d '{ contract_address : 4189139CB1387AF85E3D24E212A008AC974967E561 , function_selector : set(uint256,uint256) , parameter : 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 , fee_limit : 10, call_value : 100, owner_address : 41D1E7A6BC354106CB410E65FF8B181C600FF14292 }' Parameter contract_address: Smart contract address, defualt hexString Parameter function_selector: Function call, must not leave a blank space Parameter parameter: The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a hs tool provided by remix to convert a parameter like [1,2] to the format that VM requires Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter owner_address: Owner address that triggers the contract, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/clearabi Description: To clear the abi of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/clearabi -d '{ owner_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , contract_address : 417bcb781f4743afaacf9f9528f3ea903b3782339f }' Parameter owner_address: Owner address of the smart contract Parameter contract_address: Smart contract address, default hexString Return: Transaction object wallet/addtransactionsign Description: To sign the transaction of trigger constant contract demo: curl -X POST http://127.0.0.1:8090/wallet/addtransactionsign -d '{ owner_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , contract_address : 417bcb781f4743afaacf9f9528f3ea903b3782339f }' Parameter owner_address: Owner address of the smart contract Parameter contract_address: Smart contract address, default hexString Return: Transaction object after sign wallet/getsignweight Description: Query the current signatures total weight of a transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{ visible : true, signature : [ 36c9d227b9dd6b6f377d018bb2df784be884f28c743dc97edfdaa8bd64b2ffb058bca24a4eb8b4543a052a4f353fee8cb9e606ff739c74d22f9451c7a35c8f5200 ], txID : 4d928f7adfbad5c82f5b8518a6f7b7c5e459d06d1cb5306c61fad8a793587d2d , raw_data : { contract : [ { parameter : { value : { amount : 1000000, owner_address : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , to_address : TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW }, type_url : type.googleapis.com/protocol.TransferContract }, type : TransferContract , Permission_id : 2 } ], ref_block_bytes : 0380 , ref_block_hash : 6cdc8193f096be0f , expiration : 1556249055000, timestamp : 1556248995694 }, raw_data_hex : 0a02038022086cdc8193f096be0f40989eb0bda52d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d280270eeceacbda52d }' Parameter: Transaction object after sign Return: The current signatures total weight wallet/getapprovedlist Description: Query the signatures list of a transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{ visible : true, signature : [ 36c9d227b9dd6b6f377d018bb2df784be884f28c743dc97edfdaa8bd64b2ffb058bca24a4eb8b4543a052a4f353fee8cb9e606ff739c74d22f9451c7a35c8f5200 ], txID : 4d928f7adfbad5c82f5b8518a6f7b7c5e459d06d1cb5306c61fad8a793587d2d , raw_data : { contract : [ { parameter : { value : { amount : 1000000, owner_address : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , to_address : TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW }, type_url : type.googleapis.com/protocol.TransferContract }, type : TransferContract , Permission_id : 2 } ], ref_block_bytes : 0380 , ref_block_hash : 6cdc8193f096be0f , expiration : 1556249055000, timestamp : 1556248995694 }, raw_data_hex : 0a02038022086cdc8193f096be0f40989eb0bda52d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d280270eeceacbda52d }' Parameter: Transaction object after sign Return: The list of the signatures wallet/accountpermissionupdate Description: To set multi-signature for an account demo: curl -X POST http://127.0.0.1:8090/wallet/accountpermissionupdate -d '{ owner_address : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , owner : { type : 0, permission_name : owner , threshold : 1, keys : [ { address : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , weight : 1 } ] }, witness : { type : 1, permission_name : witness , threshold : 1, keys : [ { address : TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ , weight : 1 } ] }, actives : [ { type : 2, permission_name : active12323 , threshold : 2, operations : 7fff1fc0033e0000000000000000000000000000000000000000000000000000 , keys : [ { address : TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR , weight : 1 }, { address : TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP , weight : 1 } ] } ], visible : true }' Parameter owner_address: Owner address of the account, default hexString Parameter owner: Account owner permission Parameter witness: Account witness permission, only for witness Parameter actives: Operation permission Return: Transaction object wallet/getexpandedspendingkey Description: To get expanded spending keys from spending key demo: curl -X POST http://127.0.0.1:8090/wallet/getexpandedspendingkey -d '{ value : 06b02aaa00f230b0887ff57a6609d76691369972ac3ba568fe7a8a0897fce7c4 }' Parameter value: Spending key Return: Expanded spending keys wallet/getakfromask Description: To get ak key from ask key demo: curl -X POST http://127.0.0.1:8090/wallet/getakfromask -d '{ value : 653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604 }' Parameter value: Ask key Return: Ak key wallet/getnkfromnsk Description: To get nk key from nsk key demo: curl -X POST http://127.0.0.1:8090/wallet/getnkfromnsk -d '{ value : 428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01 }' Parameter value: Nsk key Return: Nk key wallet/getspendingkey Description: To get spending key demo: curl -X GET http://127.0.0.1:8090/wallet/getspendingkey Parameter: No Parameter Return: Spending key wallet/getdiversifier Description: To get diversifier demo: curl -X GET http://127.0.0.1:8090/wallet/getdiversifier Parameter: No Parameter Return: Diversifier wallet/getincomingviewingkey Description: To get incoming viewing key demo: curl -X POST http://127.0.0.1:8090/wallet/getincomingviewingkey -d '{ ak : b443f1a303ef5837ba95750b48b6fef15f9c77f63a8c28c161bcd6613f423b5c , nk : 632137e69179df3d10e252fcce85d13464c3163fe7a619edf8d43ebefa8162d9 }' Parameter ak: Ak Parameter nk: Nk Return: Incoming viewing key wallet/getzenpaymentaddress Description: To get payment address demo: curl -X POST http://127.0.0.1:8090/wallet/getzenpaymentaddress -d '{ ivk : 8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03 , d : 736ba8692ed88a5473e009 }' Parameter ivk: Ivk Parameter d: D Return: Payment address wallet/createshieldedtransactionwithoutspendauthsig Description: To create shielded transaction without using ask demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ ivk : 8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03 , d : 736ba8692ed88a5473e009 }' Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ask: Ask Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object wallet/createshieldedtransactionwithoutspendauthsig Description: To create shielded transaction without using ask demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ ak : bf051629fd8122cd9dd8591d72947b026c214cf7cdac1f68eff97179727d38e9 , nsk : 42963d26af8122204273fa3489d9efd6babf1f7179ff193c955a1f3d9c2df10c , ovk : bc9848a83966709655b12efadc9e978785858316045e0115a0e72567a9a2a823 , shielded_spends : [ { note : { value : 500000000, payment_address : ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02 , rcm : 723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e }, alpha : 2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04 , voucher : { tree : { left : { content : a3d5c9b2db9699f32afec5febbd5586ce9ff33a0bef6fee5691028313b8e1f6a }, parents : [ { content : d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae548 }, { content : d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae15 } ] }, rt : fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565 }, path : 2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae1520d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae5482001000000000000000000000000000000000000000000000000000000000000000600000000000000 } ], shielded_receives : [ { note : { value : 40000000, payment_address : ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr , rcm : ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03 } } ] }' Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ak: Ak Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object wallet/scannotebyivk Description: To get all the notes by ivk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyivk -d '{ startNum : 0, endNum : 100000, ivk : 80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05 }' Parameter startNum: The start block height Parameter endNum: The end block height Parameter ivk: Incoming viewing key Return: Notes list wallet/scannotebyovk Description: To get all the notes by ovk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyovk -d '{ startNum : 0, endNum : 100000, ovk : 705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539 }' Parameter startNum: The start block height Parameter endNum: The end block height Parameter ovk: Outgoing viewing key Return: Notes list wallet/getrcm Description: To get a random commitment trapdoor demo: curl -X GET http://127.0.0.1:8090/wallet/getrcm Parameter: No Parameter Return: A random commitment trapdoor wallet/getmerkletreevoucherinfo Description: To get a merkle tree infromation of a note demo: curl -X POST http://127.0.0.1:8090/wallet/getmerkletreevoucherinfo -d '{ out_points :[{ hash : 185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74 , index :0 }] }' Parameter out_points: Note information Return: A merkle tree of a note wallet/isspend Description: To check whether a note is spent or not demo: curl -X POST http://127.0.0.1:8090/wallet/isspend -d '{ ak : a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129 , nk : 62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e , note : { payment_address : ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq , rcm : 74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a , value : 500000000 }, voucher : { tree : { left : { content : a4d763fae3fee78964ccdf7567ec3062c95a5b97825d731202d3dfa6cb01c143 } }, rt : 7dc3652c2a16e8518a8be0e3e038f9d28c3eb96f13e8da8acc2a9b650702f33e } }' Parameter ak: Ak key Parameter nk: Nk key Parameter note: Note information Parameter voucher: Voucher information Return: Note status wallet/createspendauthsig Description: To create a signature for a transaction demo: curl -X POST http://127.0.0.1:8090/wallet/createspendauthsig -d '{ ask : e3ebcba1531f6d9158d9c162660c5d7c04dadf77d85d7436a9c98b291ff69a09 , tx_hash : 3b78fee6e956f915ffe082284c5f18640edca9c57a5f227e5f7d7eb65ad61502 , alpha : 2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04 }' Parameter ask: Ask key Parameter tx_hash: Transaction hash Parameter alpha: Alpha Return: A signature wallet/createshieldnullifier Description: To create a shielded nullifier demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldnullifier -d '{ note : { payment_address : ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq , rcm : 74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a , value : 500000000 }, voucher : { tree : { left : { content : a4d763fae3fee78964ccdf7567ec3062c95a5b97825d731202d3dfa6cb01c143 } }, rt : 7dc3652c2a16e8518a8be0e3e038f9d28c3eb96f13e8da8acc2a9b650702f33e }, ak : a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129 , nk : 62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e }' Parameter note: Note information Parameter voucher: Voucher information Parameter ak: Ak Parameter nk: Nk Return: A shielded nullifier wallet/getshieldtransactionhash Description: To get a shielded transaction hash demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldnullifier -d '{ txID : de639a64497d86bb27e34a2953093a0cc488ec4c7bc9624ac5857d3799748595 , raw_data : { contract : [ { parameter : { value : { binding_signature : 2b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b , spend_description : [ { value_commitment : cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a869 , anchor : fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565 , nullifier : 93e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35 , rk : 10c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d16 , zkproof : abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b1 } ], receive_description : [ { value_commitment : f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a , note_commitment : ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e , epk : 719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e6 , c_enc : 3a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f , c_out : 50be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da , zkproof : a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a80 } ] }, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract } ], ref_block_bytes : 0d59 , ref_block_hash : 7356ce5c35d8265e , expiration : 1559237283000, timestamp : 1559201285590 }, raw_data_hex : 0a020d5922087356ce5c35d8265e40b899a3ceb02d5a940b0833128f0b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412d50a1acb020a20cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a8691220fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c285651a2093e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35222010c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d162ac001abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b122c2070a20f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a1220ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e1a20719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e622c4043a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f2a5050be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da32c001a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a802a402b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b70d68b8ebdb02d }' Parameter transaction: Transaction object Return: a shielded transaction hash wallet/createshieldedtransaction Description: To create shielded transaction Please refer to: demo Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ask: Ask Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object","title":"FullNode Api Introduction"},{"location":"Tron-multi-signatures/","text":"1. Background Notice: Since V3.5 In the past version, the transactions created in one account can only be signed by one private key, an account can only be managed by one private key. Since V3.5, an account can be managed by several private keys, and the transactions created in one account can be signed by serval private keys. Tron multi-signatures Tip 2. Concept There are three types of permission: owner\u3001witness and active. Owner permission has the right to execute all the contracts. Witness permission is for SR. Active permission contains a set of contracts selected execution permissions. 2.1 Protocol Account message Account { ... Permission owner_permission = 31; Permission witness_permission = 32; repeated Permission active_permission = 33; } Three attributes are added, owner_permission\u3001witness_permission and active_permission. active_permission is a list, the length can not be bigger than 8. ContractType message Transaction { message Contract { enum ContractType { AccountCreateContract = 0; ... AccountPermissionUpdateContract = 46; } } } AccountPermissionUpdateContract is a new contract used to update the account permission. AccountPermissionUpdateContract message AccountPermissionUpdateContract { bytes owner_address = 1; Permission owner = 2; Permission witness = 3; repeated Permission actives = 4; } owner_address : The account applys multi-signatures owner : Owner permission witness : Witness permission (if is witness) actives : Active permission This will override the Original account permission. Permission message Permission { enum PermissionType { Owner = 0; Witness = 1; Active = 2; } PermissionType type = 1; int32 id = 2; string permission_name = 3; int64 threshold = 4; int32 parent_id = 5; bytes operations = 6; repeated Key keys = 7; } PermissionType : Pemission type id : Generated by system. Owner id=0, Witness id=1, Active id increases from 2. Specifying using which permission to execute a contract by setting id. For instance, using owner permission, set id=0 permission_name : Permission name, 32 bytes length limit threshold : The threshold of the signature weight parent_id : Current 0 operations : 32 bytes (256 b), each bit represent the execution permission of one contract, 1 means it owns the execution permission of the contract. For instance, operations=0x0100...00(hex), 100...0(binary), refer to the definition of Transaction.ContractType in proto, the id of AccountCreateContract is 0, means this permission only owns the execution permission of AccountCreateContract keys : The accounts and weights that all own the permission, 5 keys at most. Key message Key { bytes address = 1; int64 weight = 2; } address : The account address weight : The signature weight Transaction message Transaction { ... int32 Permission_id = 5; } Permission_id is added. It is corresponding to Permission.id 1 is not allowed, because witness permission is only used to produce blocks, not for transaction signature. 2.2 Owner Permission Owner permission is the top permission of an account. It is used to control account ownership, adjust permission structure. Owner Permission has the right to execute all the contracts. Owner permission's features: 1\u3001The account that has owner permission can change the owner permission 2\u3001When owner permission is null, the default owner of the account owns the owner permission 3\u3001When you create a new account, the address will be insert into owner permission automatically, default weight is 1, keys field only contains this address and also weight is 1. 4\u3001If a permissionId is not specified when a contract is executed, using owner permission by defualt. 2.3 Witness Permission Super representatives can use this permission to manage block producing. Only witness account has this permission. Usage scenario example: A super representative deploys a witness node on cloud server. In order to keep the account on the cloud server safe, you can only give the block producing permission to the account you put on cloud server. Because this account only owns block producing permission, no TRX transfer permission, so even if the account on the cloud server is leaked, the TRX will not be lost. Witness node configuration: 1\u3001if no witness permission is used, no need to configure 2\u3001if itness permission is used, need to reconfigure: #config.conf // Optional.The default is empty. // It is used when the witness account has set the witnessPermission. // When it is not empty, the localWitnessAccountAddress represents the address of the witness account, // and the localwitness is configured with the private key of the witnessPermissionAddress in the witness account. // When it is empty,the localwitness is configured with the private key of the witness account. //localWitnessAccountAddress = localwitness = [ f4df789d3210ac881cb900464dd30409453044d2777060a0c391cbdf4c6a4f57 ] 2.4 Active Permission Active permission is composed of a set of contract execution permission, like creating an account, trnasfer function, etc. Active permission's features: 1\u3001the account owns owner permission can change active permission 2\u3001the account owns the execution permission of AccountPermissionUpdateContract can also change active permission 3\u30018 permissions at most 4\u3001permissionId increases from 2 automatically 5\u3001when a new account is created, an active permission will be created automatically, and the address will be inserted into it, default weight is 1, keys field only contains this address and weight is 1 2.5 Fee 1\u3001Using AccountPermissionUpdateContract costs 100TRX 2\u3001If a transaction contains 2 or more than 2 signatures, it charges an extra 1 TRX besides the transaction fee 3\u3001The fee can be modified by proposing 3. API Change Permission AccountPermissionUpdateContract , steps: 1\u3001call getaccount to query the account, get the original permission 2\u3001change permission 3\u3001build transaction and sign 4\u3001send transaction http-demo http://{{host}}:{{port}}/wallet/accountpermissionupdate { owner_address : 41ffa9466d5bf6bb6b7e4ab6ef2b1cb9f1f41f9700 , owner : { type : 0, permission_name : owner , threshold : 2, keys : [{ address : 41F08012B4881C320EB40B80F1228731898824E09D , weight : 1 }, { address : 41DF309FEF25B311E7895562BD9E11AAB2A58816D2 , weight : 1 }, { address : 41BB7322198D273E39B940A5A4C955CB7199A0CDEE , weight : 1 } ] }, witness : { type : 1, permission_name : witness , threshold : 1, keys : [{ address : 41F08012B4881C320EB40B80F1228731898824E09D , weight : 1 } ] }, actives : [{ type : 2, permission_name : active0 , threshold : 3, operations : 7fff1fc0037e0000000000000000000000000000000000000000000000000000 , keys : [{ address : 41F08012B4881C320EB40B80F1228731898824E09D , weight : 1 }, { address : 41DF309FEF25B311E7895562BD9E11AAB2A58816D2 , weight : 1 }, { address : 41BB7322198D273E39B940A5A4C955CB7199A0CDEE , weight : 1 } ] }] } active permission's operations calculation demo public static void main(String[] args) { //you need to specify the id of the contract you need to give permission to by referring to the definition of Transaction.ContractType in proto to get the id of the contract, below includes all the contract except AccountPermissionUpdateContract(id=46) Integer[] contractId = {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 41, 42, 43, 44, 45}; List Integer list = new ArrayList (Arrays.asList(contractId)); byte[] operations = new byte[32]; list.forEach(e - { operations[e / 8] |= (1 e % 8); }); //7fff1fc0037e0000000000000000000000000000000000000000000000000000 System.out.println(ByteArray.toHexString(operations)); } Contract Execution 1\u3001Create transaction, the same as none multi-signatures 2\u3001Specify Permission_id, default 0, represent owner permission, demo 3\u3001User A sign the transaction, and then send it to user B 4\u3001User B sign the transaction gets from A, and then send it to user C \u2026 n\u3001The last users that signs the transaction broadcast it to the node n+1\u3001The node will verify if the sum of the weight of all signatures is bigger than threshold, if true, the transaction is accepted, otherwise, is rejected Demo: https://github.com/tronprotocol/wallet-cli/blob/multi_sign_V2/src/main/java/org/tron/demo/MultiSignDemo.java Other Api Please refer to Tron http api and Tron rpc api for more information 1\u3001add signature curl -X POST http://127.0.0.1:8090/wallet/addtransactionsign -d '{ transaction : TransferContract , privateKey : permissionkey1 }' rpc AddSign (TransactionSign) returns (TransactionExtention) {} 2\u3001query the addresses that already signed a transaction curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{ transaction }' rpc GetTransactionApprovedList(Transaction) returns (TransactionApprovedList) { } 3\u3001query the signature weigth of a transaction curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{ transaction }' rpc GetTransactionSignWeight (Transaction) returns (TransactionSignWeight) {} 4. Others Since V3.5, what is the change after a new account is created? When to create a new account, an owner permission and active permission will be generated automatically. Owner permission only contains one key, the weight and threshold are both 1. Active permission also contains one key, the weight and threshold are both 1, and operations is \"7fff1fc0037e0000000000000000000000000000000000000000000000000000\", means it support the execution of all contracts except AccountPermissionUpdateContract. Please refer to wallet-cli to check the usage of multi-signatures.","title":"TRON Multi Signatures"},{"location":"Tron-multi-signatures/#1-background","text":"","title":"1. Background"},{"location":"Tron-multi-signatures/#2-concept","text":"","title":"2. Concept"},{"location":"Tron-multi-signatures/#3-api","text":"","title":"3. API"},{"location":"Tron-multi-signatures/#4-others","text":"","title":"4. Others"},{"location":"Tron-overview/","text":"1. Project Repository Github Url: https://github.com/tronprotocol java-tron is the source code of the MainNet. protocol is the defination of the api and data structure. wallet-cli is the official command line wallet. MainNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/main_net_config.conf TestNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/test_net_config.conf 2. SRs and Committee 2.1 How to Become a Super Representative In TRON network, any account can apply to become a super representative candidate. Every account can vote for super representative candidates. The top 27 candidates with the most votes are the super representatives. Super representatives can produce blocks. The votes will be counted every 6 hours, so super representatives may also change every 6 hours. To prevent vicious attack, TRON network burns 9999 TRX from the account that applies to become a super representative candidate. 2.2 Super Representatives Election To vote, you need to have TRON Power(TP). To get TRON Power, you need to freeze TRX. Every 1 frozen TRX accounts for one TRON Power(TP). Every account in TRON network has the right to vote for a super representative candidate. After you unfreeze your frozen TRX, you will lose the responding TRON Power(TP), so your previous vote will be invalid. Note: Only your latest vote will be counted in TRON network which means your previous vote will be over written by your latest vote. Example (Using wallet-cli): freezebalance 10,000,000 3 // Freeze 10 TRX to get 10 TRON Power(TP) votewitness witness1 4 witness2 6 // Vote 4 votes for witness1, 6 votes for witness2 votewitness witness1 3 witness2 7 // Vote 3 votes for witness1, 7 votes for witness2 The final output above is: Vote 3 votes for witness1, 7 votes for witness2 2.3 Reward for Super Representatives Votes Reward: Every 6 hours, the top 127 super representative candidates with the most votes will share a total amount of 115,200 TRX according to their votes percentage. The annual votes reward is 168,192,000 TRX in total. Block Producing Reward: Every time after a super representative produces a block, it will be reward 32 TRX. The 27 super representatives take turns to produce blocks every 3 seconds. The annual block producing reward is 336,384,000 TRX in total. Every time after a super representative produces a block, the 32 TRX block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to super representative account every 24 hours. 2.4 Committee 2.4.1 What is Committee Committee can modify the TRON network parameters, like transacton fees, block producing reward amount, etc. Committee is composed of the current 27 super representatives. Every super representative has the right to start a proposal. The proposal will be passed after it gets more than 19 approves from the super representatives and will become valid in the next maintenance period. 2.4.2 Create a Proposal Only the account of a super representative can create a proposal. The network parameters can be modified([min,max]): 0: MAINTENANCE_TIME_INTERVAL, [3 * 27* 1000, 24 * 3600 * 1000] //super representative votes count time interval, currently 6 * 3600 * 1000 ms 1: ACCOUNT_UPGRADE_COST, [0, 100 000 000 000 000 000] //the fee to apply to become a super representative candidate, currently 9999_000_000 SUN 2: CREATE_ACCOUNT_FEE, [0, 100 000 000 000 000 000] //the fee to create an account, currently 100_000 SUN 3: TRANSACTION_FEE, [0, 100 000 000 000 000 000] //the fee for bandwidth, currently 10 SUN/byte 4: ASSET_ISSUE_FEE, [0, 100 000 000 000 000 000] //the fee to issue an asset, currently 1024_000_000 SUN 5: WITNESS_PAY_PER_BLOCK, [0, 100 000 000 000 000 000] //the block producing reward, currently 32_000_000 SUN 6: WITNESS_STANDBY_ALLOWANCE, [0, 100 000 000 000 000 000] //the votes reward for top 127 super representative candidates, currently 115_200_000_000 SUN 7: CREATE_NEW_ACCOUNT_FEE_IN_SYSTEM_CONTRACT, //the fee to create an account in system, currently 0 SUN 8: CREATE_NEW_ACCOUNT_BANDWIDTH_RATE, //the consumption of bandwith or TRX while creating an account, using together with #7 9: ALLOW_CREATION_OF_CONTRACTS, //to enable the VM 10: REMOVE_THE_POWER_OF_THE_GR, //to clear the votes of GR 11: ENERGY_FEE, [0,100 000 000 000 000 000] //SUN 12: EXCHANGE_CREATE_FEE, [0, 100 000 000 000 000 000] //SUN 13: MAX_CPU_TIME_OF_ONE_TX, [0, 1000] //ms 14: ALLOW_UPDATE_ACCOUNT_NAME, //to allow users to change account name and allow account duplicate name, currently 0, means false 15: ALLOW_SAME_TOKEN_NAME, //to allow create a token with duplicate name, currently 1, means true 16: ALLOW_DELEGATE_RESOURCE, //to enable the resource delegation 17: TOTAL_ENERGY_LIMIT, //to modify the energy limit 18: ALLOW_TVM_TRANSFER_TRC10, //to allow smart contract to transfer TRC-10 token, currently 0, means false Example (Using wallet-cli): createproposal id value id: the serial number (0 ~ 18) value: the parameter value Note: In TRON network, 1 TRX = 1000_000 SUN 2.4.3 Vote for a Proposal Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): approveProposal id is_or_not_add_approval id: proposal id is_or_not_add_approval: YES vote or cancel YES vote 2.4.4 Cancel Proposal Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): deleteProposal id id: proposal id 2.4.5 Query Proposal Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more api detail, please refer to Tron-http 3. Account Model 3.1 Introduction TRON uses account model. An account's identity is address, it needs private key signature to operate an account. An account has many attributes, like TRX balance, tokens balance, bandwidth, etc. TRX and tokens can be transfered from account to account and it costs bandwidth. An account can also issue a smart contract, apply to become a super representative candidate, vote, etc. All TRON's activities are based on account. 3.2 How to Create an Account 1. Use a wallet to generate the address and private key. To active the account, you need to transfer TRX or transfer token to the new created account. generate an account 2. Use an account already existed in TRON network to create an account 3.3 Key-pair Generation Algorithm Tron signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random bumber, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then caculate P = d * G as the public key, G is the elliptic curve base point. 3.4 Address Format Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address come out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 caculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" 3.5 Signature Signature introduction, please refer to: https://github.com/tronprotocol/Documentation/blob/fix_http/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E4%BA%A4%E6%98%93%E7%AD%BE%E5%90%8D%E6%B5%81%E7%A8%8B.md 4. Network Node 4.1 SuperNode 4.1.1 SuperNode Introduction Super Representative(abbr: SR) is the block producer in TRON network, there are 27 SR. They verify the transactions and write the transactions into the blocks, they take turns to produce blocks. The super Representatives' information is public to everyone in TRON network. The best way to browse is using tronscan . 4.1.2 SuperNode Deployment SuperNode Deployment 4.1.3 Recommended Hardware Configuration minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: 64 cores RAM: 64G, Bandwidth: 500M, Disk: 20T 4.2 FullNode 4.2.1 FullNode Introduction FullNode has the complete block chain data, can update data in real time. It can broadcast the transactions and provide api service. 4.2.2 FullNode Deployment please refer to TRON-Deployment 4.2.3 Recommended Hardware Configuration minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: 64 cores RAM: 64G, Bandwidth: 500M, Disk: 20T 4.3 SolidityNode 4.3.1 SolidityNode Introduction SolidityNode only synchronize solidified blocks data from the fullNode it specifies, It also provie api service. 4.3.2 SolidityNode Deployment please refer to TRON-Deployment 4.3.3 Recommended Hardware Configuration minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: 64 cores RAM: 64G, Bandwidth: 500M, Disk: 20T 4.4 TRON Network Instructure TRON network uses Peer-to-Peer(P2P) network instructure, all nodes status equal. There are three types of node: SuperNode, FullNode, SolidityNode. SuperNode produces blocks, FullNode synchronizes blocks and broadcasts transactions, SolidityNode synchronizes solidified blocks. Any device that deploy the java-tron code can join TRON network as a node. 4.5 FullNode and SolidityNode Fast Deployment Download fast deployment script, run the script according to different types of node. please refer to Node Fast Deployment 4.6 MainNet, TestNet, PrivateNet MainNet, TestNet, PrivateNet all use the same code, only the node start configuration varies. 4.6.1 MainNet MainNet configuration 4.6.2 TestNet TestNet configuration 4.6.3 PrivateNet 4.6.3.1 Preconditions at least two accounts generate an account at least deploy one SuperNode to produce blocks deploy serval FullNodes to synchronize blocks and broadcast transactions SuperNode and FullNode comprise the private network 4.6.3.2 Deployment 4.6.3.2.1 Step 1: SuperNode Deployment 1. download private_net_config.conf wget https://github.com/tronprotocol/tron-deployment/blob/master/private_net_config.conf 2. add your private key in localwitness 3. set genesis.block.witnesses as the private key's corresponding address 4. set p2p.version, any positive integer but 11111 5. set the first SR needSyncCheck = false, others can be set true 6. set node.discovery.enable = true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --witness -c private_net_config.conf command line parameters introduction: --witness: start witness function, i.e.: --witness --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: localwitness: witnesses: version: enable: 4.6.3.2.2 Step 2: FullNode Deployment 1. Download private_net_config.conf wget https://github.com/tronprotocol/tron-deployment/blob/master/private_net_config.conf 2. set seed.node ip.list with SR's ip and port 3. set p2p.version the same as SuperNode's p2p.version 4. set genesis.block the same as genesis.block 5. set needSyncCheck true 6. set node.discovery.enable true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --witness -c private_net_config.conf command lines parameters --witness: start witness function\uff0ci.e.: --witness --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: ip.list: p2p.version: genesis.block: needSyncCheck: node.discovery.enable: 4.7 DB Engine 4.7.1 Rocksdb 4.7.1.1 Configuration Use rocksdb as the data storage engine, need to set db.engine to \"ROCKSDB\" Note: rocksdb only support db.version=2, do not support db.version=1 The optimization parameters rocksdb support: 4.7.1.2 Use rocksdb's data backup function Choose rocksdb to be the data storage engine, you can use it's data backup funchtion while running Note: FullNode can use data backup function. In order not to affect SuperNode's block producing performance, SuperNode does not support backup service, but SuperNode's backup service node can use this function. 4.7.1.3 Convert leveldb data to rocksdb data The data storage structure of leveldb and rocksdb is not compatible, please make sure the node use the same type of data engine all the time. We provide data conversion script which can convert leveldb data to rocksdb data. Usage: cd to the source code root directory ./gradlew build #build the source code java -jar build/libs/DBConvert.jar #run data conversion command Note: If the node's data storage directory is self-defined, before run DBConvert.jar, you need to add the following parameters: src_db_path : specify LevelDB source directory, default output-directory/database dst_db_path : specify RocksDb source directory, default output-directory-dst/database Example, if you run the script like this: nohup java -jar FullNode.jar -d your_database_dir then, you should run DBConvert.jar this way: java -jar build/libs/DBConvert.jar your_database_dir/database output-directory-dst/database Note: You have to stop the running of the node, and then to run the data conversion script. If you do not want to stop the running of the node for too long, after node is shut down, you can copy leveldb's output-directory to the new directory, and then restart the node. Run DBConvert.jar in the previous directory of the new directory, and specify the parameters: src_db_path \u548c dst_db_path . Example: cp -rf output-directory /tmp/output-directory cd /tmp java -jar DBConvert.jar output-directory/database output-directory-dst/database All the whole data conversion process may take 10 hours. 4.7.1.4 rocksdb vs leveldb you can refer to: rocksdb vs leveldb ROCKSDB vs LEVELDB 5. Smart Contract 5.1 TRON Smart Contract Introduction Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can runs in the way it is designed. TRON smart contract support Solidity language in (Ethereum). Currently recommend Solidity language version is 0.4.24 ~ 0.4.25. Write a smart contract, then build the smart contract and deploy it to TRON network. When the smart contract is triggered, the corresponding function will be executed automatically. 5.2 TRON Smart Contract Features TRON virtual machine is based on Ethereum solidity language, it also has TRON's own features. 5.2.1 Smart Contract TRON VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0; Constructor = 1; Function = 2; Event = 3; Fallback = 4; } message Param { bool indexed = 1; string name = 2; string type = 3; // SolidityType type = 3; } enum StateMutabilityType { UnknownMutabilityType = 0; Pure = 1; View = 2; Nonpayable = 3; Payable = 4; } bool anonymous = 1; bool constant = 2; string name = 3; repeated Param inputs = 4; repeated Param outputs = 5; EntryType type = 6; bool payable = 7; StateMutabilityType stateMutability = 8; } repeated Entry entrys = 1; } bytes origin_address = 1; bytes contract_address = 2; ABI abi = 3; bytes bytecode = 4; int64 call_value = 5; int64 consume_user_resource_percent = 6; string name = 7\uff1b int64 origin_energy_limit = 8; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of the all the function of the smart contract bytecode: smart contract byte code call_value: TRX transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_energy_limit: energy consumption of the developer limit in one call, must greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateEnergyLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contract. 5.2.2 The Usage of the Function of Smart Contract 1. constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while be called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. 2. message calls Message calls can call the functions of other contracts, also can transfer TRX to the accounts of contract and none-contract. Like the common TRON triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining energy in the internal message call. If it comes with OutOfEnergyException in the internal message call, it will return false, but not error. In the meanwhile, only the gas sent with the internal message call will be consumed, if energy is not specified in call.value(energy), all the remaining energy will be used. 3. delegate call/call code/libary There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically loadcode from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. 4. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated TRON address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the defination of nonce is the comtract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. 5. built-in function and built-in function attribute (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 1\uff09TVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: TRON's smart contract is different from TRON's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2\uff09Different accouts vote for SuperNode (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 3\uff09SuperNode gets all the reward (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 4\uff09SuperNode approves or disappoves the proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 5\uff09SuperNode proposes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 6\uff09SuperNode deletes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 7\uff09TRON byte address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 8\uff09TRON string address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 9\uff09Send token to target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 10\uff09Query token amount of target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 11\uff09Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of TRON is a hash result based on TRON's sha256, not an accurate Ethereum RIPEMD160. 5.2.3 Contract Address Using in Solidity Language Ethereum VM address is 20 bytes, but TRON's VM address is 21 bytes. 1. address conversion Need to convert TRON's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) tron address to solidity address type * @param tronAddress uint256 tronAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromTronInt(uint256 tronAddress) public view returns(address){ return address(tronAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. 2. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address tronAddress) public view returns (uint256){ // if (tronAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (tronAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c 3. variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use TRON address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8). 5.2.4 The Special Constants Differ from Ethereum Currency Like solidity supports ETH, TRON VM supports trx and sun, 1 trx = 1000000 sun, case sensitive, only support lower case. tron-studio supports trx and sun, remix does not support trx and sun. We recommend to use tron-studio instead of remix to build TRON smart contract. Block block.blockhash (uint blockNumber) returns (bytes32): specified block hash, can only apply to the latest 256 blocks and current block excluded block.coinbase (address): SuperNode address that produced the current block block.difficulty (uint): current block difficulty, not recommended, set 0 block.gaslimit (uint): current block gas limit, not supported, set 0 block.number (uint): current block number block.timestamp (uint): current block timestamp gasleft() returns (uint256): remaining gas msg.data (bytes): complete call data msg.gas (uint): remaining gas - since 0.4.21, not recommended, replaced by gesleft() msg.sender (address): message sender (current call) msg.sig (bytes4): first 4 bytes of call data (function identifier) msg.value (uint): the amount of SUN send with message now (uint): current block timestamp (block.timestamp) tx.gasprice (uint): the gas price of transaction, not recommended, set 0 tx.origin (address): transaction initiator 5.3 Energy Introduction Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource. 5.3.1 How to Get Energy Freeze TRX to get energy. Example (Using wallet-cli): freezeBalance frozen_balance frozen_duration [ResourceCode:0 BANDWIDTH,1 ENERGY] Freeze TRX to get energy, energy obtained = user's TRX frozen amount / total amount of frozen TRX in TRON * 50_000_000_000. Example: If there are only two users, A freezes 2 TRX, B freezes 2 TRX the energy they can get is: A: 25_000_000_000 and energy_limit is 25_000_000_000 B: 25_000_000_000 and energy_limit is 25_000_000_000 when C freezes 1 TRX: the energy they can get is: A: 20_000_000_000 and energy_limit is 20_000_000_000 B: 20_000_000_000 and energy_limit is 20_000_000_000 B: 10_000_000_000 and energy_limit is 10_000_000_000 Energy Recovery The energy consumed will reduce to 0 smoothly within 24 hours. Example: at one moment, A has used 72_000_000 Energy if there is no continuous consumption or TRX freeze one hour later, the energy consumption amount will be 72_000_000 - (72_000_000 * (60*60/60*60*24)) Energy = 69_000_000 Energy 24 hours later, the energy consumption amount will be 0 Energy 5.3.2 How to Set Fee Limit (Caller Must Read) Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of energy consumed while call the contract can be converted to TRX or SUN, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Energy, TRX and SUN, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great energy, it will not consume too much energy from the caller. Before you set fee limit, you need to know several conception: 1. The legal fee limit is a integer between 0 - 10^9, unit is SUN. 2. Different smart contracts consume different amount of energy due to their complexity. The same trigger in the same contract almost consumes the same amount fo energy[1]. When the contract is triggered, the commands will be excuted one by one and consume energy. If it reaches the fee limit, commands will fail to be excuted, and energy is not refundable. 3. Currently fee limit only refers to the energy converted to SUN that will be consumed from the caller[2]. The energy consumed by triggering contract also includes developer's share. 4. For a vicious contract, if it encounters execution timeout or bug crash, all it's energy will be consumed. 5. Developer may undertake a proportion of energy consumption(like 90%). But if the developer's energy is not enough for consumption, the rest of the energy consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough energy, then it will burn equivalent amount of TRX [2]. To encourage caller to trigger the contract, usually developer has enough energy. Example How to estimate the fee limit: Assume contract C's last execution consumes 18000 Energy, so estimate the energy consumption limit to be 20000 Energy[3] According to the frozen TRX amount and energy conversion, assume 1 TRX = 400 energy. When to burn TRX, 1 TRX = 10000 energy[4] Assume developer undertake 90% energy consumption, and developer has enough energy. Then the way to estimate the fee limit is: 1). A = 20000 energy * (1 TRX / 400 energy) = 50 TRX = 50_000_000 SUN, 2). B = 20000 energy * (1 TRX / 10000 energy) = 2 TRX = 2_000_000 SUN, 3). Take the greater number of A and B, which is 50_000_000 SUN, 4). Developer undertakes 90% energy consumption, caller undertakes 10% energy consumption, So, the caller is suggested to set fee limit to 50_000_000 SUN * 10% = 5_000_000 SUN Note: [1] The energy consumption of each execution may fluctuate slightly due to the situation of all the nodes. [2] TRON may change this policy. [3] The estimated energy consumption limit for the next execution should be greater than the last one. [4] 1 TRX = 10^4 energy is a fixed number for burning TRX to get energy, TRON may change it in future. 5.3.3 Energy Calculation (Developer Must Read) 1. In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 50ms) or quits due to bug (revert not included), the maximum available energy will be deducted. If the contract runs normally or revert, only the energy needed for the execution of the commands will be deducted. 2. Developer can set the proportion of the energy consumption it undertakes during the execution, this proportion cna be changed later. If the developer's energy is not enough, it will consume the caller's energy. 3. Currently, the total energy available when trigger a contract is composed of caller fee limit and developer's share Note: - If the developer is not sure about whether the contract is normal, do not set caller's energy consumption proportion to 0%, in case all developer's energy will be deducted due to vicious execution[1]. - We recommend to set caller's energy consumption proportion to 10% ~ 100%[2]. Example 1 A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX frozen for 100000 energy. Smart contract C set the caller energy consumption proportion to 100% which means the caller will pay for the energy consumption completely. A triggers C, the fee limit set is 30000000 (unit SUN, 30 TRX) So during this trigger the energy A can use is from two parts: - A's energy by freezing TRX; - The energy converted from the amount of TRX burning according to a fixed rate; If fee limit is greater than the energy obtained from freezing TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 100 SUN, fee limit still has (30 - 10) TRX = 20 TRX available, so the energy it can keep consuming is 20 TRX / 100 SUN = 200000 energy. Finally, in this call, the energy A can use is (100000 + 200000) = 300000 energy. If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error come out, it will consume the whole number of energy set for fee limit. Assert-style error introduction, refer to https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md Example 2 A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX frozen for 100000 energy. Smart contract C set the caller energy consumption proportion to 40% which means the developer will pay for the rest 60% energy consumption. Developer D freezes 50 TRX to get 500000 energy. A triggers C, the fee limit set is 200000000 (unit SUN, 200 TRX). So during this trigger the energy A can use is from three parts: - A's energy by freezing TRX -- X; - The energy converted from the amount of TRX bruning according to a fixed rate -- Y; If fee limit is greater than the energy obtained from freezing TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 100 SUN, fee limit still has (200 - 10) TRX = 190 TRX available, but A only has 90 TRX left, so the energy it can keep consuming is 90 TRX / 100 SUN = 900000 energy; - D's energy by freezing TRX -- Z; There are two situation: if (X + Y) / 40% = Z / 60%, the energy A can use is X + Y + Z if (X + Y) / 40% Z / 60%, the energy A can use is (X + Y) / 40% If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error comes out, it will consume the whole number of energy set for fee limit. Assert-style error introduction, refer to (https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md) Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the energy consumption. If Assert-style error comes out, it will consume all energy from the developer itsef. Assert-style error introduction, refer to https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent. 5.4 Smart Contract Development Tool 5.4.1 TronStudio Support the build, debug, run, etc. for solidity language written smart contract. https://developers.tron.network/docs/tron-studio-intro 5.4.2 TronBox Support the build, deploy, transplant, etc. for solidity language written smart contract. https://developers.tron.network/docs/tron-box-user-guide 5.4.3 TronWeb Provide http api service for the usage of smart contract. https://developers.tron.network/docs/tron-web-intro 5.4.4 TronGrid Provide smart contract event query service. https://developers.tron.network/docs/tron-grid-intro 5.5 Using Command Lines Tool to Develop Smart Contract First you can use TronStudio to write, build and debug the smart contract. After you finish the development of the contract, you can copy it to SimpleWebCompiler to compile to get ABI and ByteCode. We provide a simple data read/write smart contract code example to demonstrate: pragma solidity ^0.4.0; contract DataStore { mapping(uint256 = uint256) data; function set(uint256 key, uint256 value) public { data[key] = value; } function get(uint256 key) view public returns (uint256 value) { value = data[key]; } } Start a Private Net Make sure the fullnode code has been deployed locally, you can check if 'Produce block successfully' log appears in FullNode/logs/tron.log Develop a Smart Contract Copy the code example above to remix to debug. Compile in SimpleWebCompiler for ABI and ByteCode Copy the code example above to SimpleWebCompiler to get ABI and ByteCode. Because TRON's compiler is a little different from Ethereum, so you can not get ABI and ByteCode by using Remix. But it will soon be supported. Using Wallet-cli to Deploy Download Wallet-Cli and build shell # download cource code git clone https://github.com/tronprotocol/wallet-cli cd wallet-cli # build ./gradlew build cd build/libs Note: You need to change the node ip and port in config.conf start wallet-cli java -jar wallet-cli.jar after started, you can use command lines to operate: importwallet input your password twice for your account input your private key login input your password you set getbalance deploy contract Shell # contract deployment command DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent value library:address,library:address,... # parameters contract_name: Contract name ABI: ABI from SimpleWebCompiler bytecode: ByteCode from SimpleWebCompiler constructor: When deploy contract, this will be called. If is needed, write as constructor(uint256,string). If not, just write # params: The parameters of the constructor, use ',' to split, like 1, test , if no constructor, just write # fee_limit: The TRX consumption limit for the deployment, unit is SUN(1 SUN = 10^-6 TRX) consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up value: The amount of TRX transfer to the contract when deploy library: If the contract contains library, you need to specify the library address # example deploycontract DataStore [{ constant :false, inputs :[{ name : key , type : uint256 },{ name : value , type : uint256 }], name : set , outputs :[], payable :false, stateMutability : nonpayable , type : function },{ constant :true, inputs :[{ name : key , type : uint256 }], name : get , outputs :[{ name : value , type : uint256 }], payable :false, stateMutability : view , type : function }] 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 # # false 1000000 30 0 If it is deployed successfully, it will return 'Deploy the contract successfully' get the contract address Your smart contract address will be: contract address # in this example Your smart contract address will be: TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 call the contract to store data, query data Shell # call contract command triggercontract contract_address method args is_hex fee_limit value # parameters contract_address: Contract address, like TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 method: The method called, like set(uint256,uint256) or fool(), use ',' to split the parameters. Do not leave space between parameters args: The parameters passed to the method called, use ',' to split the parameters. Do not leave space between parameters is_hex: whether the input parameters is Hex, false or true fee_limit: The TRX consumption limit for the trigger, unit is SUN(1 SUN = 10^-6 TRX) value: The amount of TRX transfer to the contract when trigger # trigger example ## set mapping 1- 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 set(uint256,uint256) 1,1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 ## get mapping key = 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 get(uint256) 1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 If the function called is constant or view, wallet-cli will return the result directly. If it contains library, before deploy the contract you need to deploy the library first. After you deploy library, you can get the library address, then fill the address in library:address,library:address,... # for instance, using remix to get the bytecode of the contract, like: 608060405234801561001057600080fd5b5061013f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f75dac5a14610046575b600080fd5b34801561005257600080fd5b5061005b610071565b6040518082815260200191505060405180910390f35b600073 b __browser/oneLibrary.sol.Math3__________ \\b 634f2be91f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100d357600080fd5b505af41580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b81019080805190602001909291905050509050905600a165627a7a7230582052333e136f236d95e9d0b59c4490a39e25dd3a3dcdc16285820ee0a7508eb8690029 The address of the library deployed before is: TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 When you deploy, you need to use browser/oneLibrary.sol.Math3:TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 as the parameter of deploycontract. 6. Built-in Contracts and API 6.1 Built-in Contracts Please refer to: https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E6%B3%A2%E5%9C%BA%E5%8D%8F%E8%AE%AE/%E4%BA%A4%E6%98%93%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B%E8%AF%B4%E6%98%8E.md 6.2 GRPC API Introduction Please refer to: https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E6%B3%A2%E5%9C%BA%E5%8D%8F%E8%AE%AE/%E6%B3%A2%E5%9C%BA%E9%92%B1%E5%8C%85RPC-API.md 6.3 Http API Introduction Please refer to: https://github.com/tronprotocol/Documentation/blob/master/TRX_CN/Tron-http.md 7. TRC-10 Token Introduction TRON network support two types of token, one is TRC-20 token issued by smart contract, the other one is TRC-10 token issued by system contract. 7.1 How to Issue a TRC-10 Token Http Api: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ owner_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , name : 0x6173736574497373756531353330383934333132313538 , abbr : 0x6162627231353330383934333132313538 , total_supply :4321, trx_num :1, num :1, start_time : 1530894315158, end_time :1533894312158, description : 007570646174654e616d6531353330363038383733343633 , url : 007570646174654e616d6531353330363038383733343633 , free_asset_net_limit :10000, public_free_asset_net_limit :10000, frozen_supply :{ frozen_amount :1, frozen_days :2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num, Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter frozen_supply: Token frozen supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN 7.2 Participate TRC-10 Token Http Api: wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ to_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , owner_address : 41e472f387585c2b58bc2c9bb4492bc1f17342cd1 , amount :100, asset_name : 3230313271756265696a696e67 }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token 7.3 TRC-10 Token Transfer Http Api: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ owner_address : 41d1e7a6bc354106cb410e65ff8b181c600ff14292 , to_address : 41e552f6487585c2b58bc2c9bb4492bc1f17132cd0 , asset_name : 31303030303031 , amount : 100}' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token 8. Resource Model 8.1 Resource Model Introduction TRON network has 4 types of resources: Bandwidth, CPU, Storage and RAM. Benefit by TRON's exclusive RAM model, TRON's RAM resource is almost infinite. TRON network imports two resource conceptions: Bandwidth points and Energy. Bandwidth Point represents Bandwidth, Energy represents CPU and Storage. Note: - Ordinary transaction only consumes Bandwidth points - Smart contract related transaction not only consumes Bandwidth points, but also Energy 8.2 Bandwidth Points The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1 Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note: Due to the change of the total amount of the frozen TRX in the network and the self-frozen TRX amount, the Bandwidth Points an account possesses is not fixed. 8.2.1 How to Get Bandwidth Points 1. By Freezing TRX to get Bandwidth Points, Bandwidth Points = the amount of TRX self-frozen / the total amount of TRX frozen for Bandwidth Points in the network * 43_200_000_000 2. Every account has a fixed amount of free Bandwidth Points(5000) every day 8.2.2 Bandwith Points Consumption Except for query operation, any transaction consumes Bandwidth points. There's another situation: When you transfer(TRX or token) to an account that does not exist in the network, this operation will first create that account in the network and then do the transfer. It only consumes Bandwidth points for account creation, no extra Bandwidth points consumption for transfer. Create a new account transaction, Bandwidth points consumption sequence: 1. Bandwidth points from freezing TRX. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 2; 2. Burn 0.1 TRX; Token transfer transaction, Bandwidth points consumption sequence: 1. \u4f9d\u6b21\u9a8c\u8bc1 \u53d1\u884cToken\u8d44\u4ea7\u603b\u7684\u514d\u8d39Bandwidth Points\u662f\u5426\u8db3\u591f\u6d88\u8017\uff0c\u8f6c\u8d26\u53d1\u8d77\u8005\u7684Token\u5269\u4f59\u514d\u8d39Bandwidth Points\u662f\u5426\u8db3\u591f\u6d88\u8017\uff0c Token\u53d1\u884c\u8005\u51bb\u7ed3TRX\u83b7\u53d6Bandwidth Points\u5269\u4f59\u91cf\u662f\u5426\u8db3\u591f\u6d88\u8017\u3002\u5982\u679c\u6ee1\u8db3\u5219\u6263\u9664Token\u53d1\u884c\u8005\u7684Bandwidth Points\uff0c\u4efb\u610f\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u5219\u8fdb\u5165\u4e0b\u4e00\u6b65\u3002 2. Bandwidth points from freezing TRX. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 3; 3. Free Bandwidth points. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 4; 4. Bandwidth points from burning TRX, the rate = the number of bytes of the transaction * 10 SUN; Ordinary transaction, Bandwidth points consumption sequence: 1. Bandwidth points from freezing TRX. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 2; 2. Free Bandwidth points. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 3; 3. Bandwidth points from burning TRX, the rate = the number of bytes of the transaction * 10 SUN; 8.2.3 Bandwidth Points Recovery Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. For the specific formula: Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. 8.3 Energy 5.3 Energy Introduction 8.4 Resource Delegation In TRON network, an account can freeze TRX for Bandwidth or Energy for other accounts. The primary account owns the frozen TRX and TRON power, the recipient account owns the Bandwidth or Energy. Like ordinary freezing, resource delegation freezing is also at least 3 days. Example(Using wallet-cli) freezeBalance frozen_balance frozen_duration [ResourceCode:0 BANDWIDTH,1 ENERGY] [receiverAddress] frozen_balance: the amount of TRX to freeze (unit SUN) frozen_duration: the freezing period (currently a fixed 3 days) ResourceCode: 0 for Bandwidth, 1 for Energy receiverAddress: recipient account address 8.5 Other Fees Type Fee Create a witness 9999 TRX Issue a token 1024 TRX Create an account 0.1 TRX Create an exchange 1024 TRX 9. DEX Introduction TRON network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs. 9.1 What is an Exchange Pair The term of 'Exchange Pair' describes a trade between one token with another, like A/B, A/TRX. 9.2 Exchange Pair Creation Any account can create an exchange pair, it burns 1024 TRX. Please refer to 'wallet/exchangecreate': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.3 Exchange Pair Transaction Any account can trade in the DEX. The trade follows Bancor protocol. Please refer to 'wallet/exchangetransaction': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.4 Exchange Pair Injection The exchange pair creator can inject more tokens into the exchange pair. Injection can decrease the range of ratio fluctuation. If one token is injected, the other one will be injected automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangeinject': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.5 Exchange Pair Withdrawal The exchange pair creator can withdraw tokens from the exchange pair. Withdrawal can increase the range of ratio fluctuation. If one token is withdrawn, the other one will be withdrawn automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangewithdraw': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md) 9.6 Query 9.6.1 Transaction Query ListExchanges: Query the list of all the exchange pairs GetPaginatedExchangeList: Query the list of all the exchange pairs by pagination GetExchangeById: Query an exchange pair by exchange pair id Please refer to: https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.6.2 Price Calculation The token price is determined by the ratio of the balance of the two tokens. 9.6.3 Calculate the Amount of Token You Can Get sellTokenQuant is the amount of the first_token you want to sell; buyTokenQuant is the amount of second_token you can get; supply = 1_000_000_000_000_000_000L; supplyQuant = -supply * (1.0 - Math.pow(1.0 + (double) sellTokenQuant/\uff08firstTokenBalance + sellTokenQuant, 0.0005)); buyTokenQuant = \uff08long\uff09balance * (Math.pow(1.0 + (double) supplyQuant / supply, 2000.0) - 1.0); 10. Multi-Signatures Please refer to: https://github.com/tronprotocol/documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E6%B3%A2%E5%9C%BA%E5%8D%8F%E8%AE%AE/%E5%A4%9A%E9%87%8D%E7%AD%BE%E5%90%8D.md 11. Wallet Introduction 11.1 wallet-cli Introduction Please refer to: https://github.com/tronprotocol/wallet-cli/blob/master/README.md 11.2 Get Transaction ID Hash.sha256(transaction.getRawData().toByteArray()) 11.3 Get Block ID private byte[] generateBlockId(long blockNum, byte[] blockHash) {\u2028 byte[] numBytes = Longs.toByteArray(blockNum);\u2028 byte[] hash = blockHash;\u2028 System.arraycopy(numBytes, 0, hash, 0, 8);\u2028 return hash; \u2028} 11.4 How to Build a Transaction Locally According to the defination of the transaction, you need to fill up all the fields of the transaction. You need to set refference block and expiration time information, so you need to connect to the Mainnet. We recommend to use the latest block on fullnode as the value of refference block, use the latest block time plus N minutes as the value of expiration time. The network judgment condition is if (expiration latest block time and expiration latest block time + 24 hours) means the transaction is in period of validity. Otherwise, it will be a overdue transaction, will not be accepted by the Mainnet. Way to set refference block: set RefBlockHash the bytes from the 8 to 16(not included) of the hash of the latest block, set BlockBytes the bytes from 6 to 8(not included) of the height of the latest block. public static Transaction setReference(Transaction transaction, Block newestBlock) { long blockHeight = newestBlock.getBlockHeader().getRawData().getNumber(); byte[] blockHash = getBlockHash(newestBlock).getBytes(); byte[] refBlockNum = ByteArray.fromLong(blockHeight); Transaction.raw rawData = transaction.getRawData().toBuilder() .setRefBlockHash(ByteString.copyFrom(ByteArray.subArray(blockHash, 8, 16))) .setRefBlockBytes(ByteString.copyFrom(ByteArray.subArray(refBlockNum, 6, 8))) .build(); return transaction.toBuilder().setRawData(rawData).build(); } Way to set expiration time and transaction timestamp: public static Transaction createTransaction(byte[] from, byte[] to, long amount) { Transaction.Builder transactionBuilder = Transaction.newBuilder(); Block newestBlock = WalletClient.getBlock(-1); Transaction.Contract.Builder contractBuilder = Transaction.Contract.newBuilder(); Contract.TransferContract.Builder transferContractBuilder = Contract.TransferContract .newBuilder(); transferContractBuilder.setAmount(amount); ByteString bsTo = ByteString.copyFrom(to); ByteString bsOwner = ByteString.copyFrom(from); transferContractBuilder.setToAddress(bsTo); transferContractBuilder.setOwnerAddress(bsOwner); try { Any any = Any.pack(transferContractBuilder.build()); contractBuilder.setParameter(any); } catch (Exception e) { return null; } contractBuilder.setType(Transaction.Contract.ContractType.TransferContract); transactionBuilder.getRawDataBuilder().addContract(contractBuilder) .setTimestamp(System.currentTimeMillis()) //in the form of millisecond .setExpiration(newestBlock.getBlockHeader().getRawData().getTimestamp() + 10 * 60 * 60 * 1000); Transaction transaction = transactionBuilder.build(); Transaction refTransaction = setReference(transaction, newestBlock); return refTransaction; } 11.5 Related Demo Build transaction locally, signature demo, please refer to: https://github.com/tronprotocol/wallet-cli/blob/master/src/main/java/org/tron/demo/TransactionSignDemo.java nodejs demo, please refer to: https://github.com/tronprotocol/tron-demo/tree/master/demo/nodejs","title":"TRON Overview"},{"location":"Tron-overview/#1-project-repository","text":"Github Url: https://github.com/tronprotocol java-tron is the source code of the MainNet. protocol is the defination of the api and data structure. wallet-cli is the official command line wallet. MainNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/main_net_config.conf TestNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/test_net_config.conf","title":"1. Project Repository"},{"location":"Tron-overview/#2-srs-and-committee","text":"","title":"2. SRs and Committee"},{"location":"Tron-overview/#3-account-model","text":"","title":"3. Account Model"},{"location":"Tron-overview/#4-network-node","text":"","title":"4. Network Node"},{"location":"Tron-overview/#5-smart-contract","text":"","title":"5. Smart Contract"},{"location":"Tron-overview/#6-built-in-contracts-and-api","text":"","title":"6. Built-in Contracts and API"},{"location":"Tron-overview/#7-trc-10-token-introduction","text":"TRON network support two types of token, one is TRC-20 token issued by smart contract, the other one is TRC-10 token issued by system contract.","title":"7. TRC-10 Token Introduction"},{"location":"Tron-overview/#8-resource-model","text":"","title":"8. Resource Model"},{"location":"Tron-overview/#9-dex-introduction","text":"TRON network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs.","title":"9. DEX Introduction"},{"location":"Tron-overview/#10-multi-signatures","text":"Please refer to: https://github.com/tronprotocol/documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E6%B3%A2%E5%9C%BA%E5%8D%8F%E8%AE%AE/%E5%A4%9A%E9%87%8D%E7%AD%BE%E5%90%8D.md","title":"10. Multi-Signatures"},{"location":"Tron-overview/#11-wallet-introduction","text":"","title":"11. Wallet Introduction"},{"location":"Tron-rpc/","text":"For the specific definition of API, please refer to the following link: https://github.com/tronprotocol/protocol/blob/master/api/api.proto https://github.com/tronprotocol/protocol/blob/master/core/Contract.proto 1. Get account information Interface statement: rpc GetAccount (Account) returns (Account) {} Nodes: Fullnode and SolidityNode 2. TRX transfer Interface statement: rpc CreateTransaction (TransferContract) returns (Transaction) {} Nodes: Fullnode 3. Broadcast transaction Interface statement: rpc BroadcastTransaction (Transaction) returns (Return) {} Nodes: Fullnode Description: Transfer, vote, issuance of token, or participation in token offering. Sending signed transaction information to node, and broadcasting it to the entire network after witness verification. 4. Create an account Interface statement: rpc CreateAccount (AccountCreateContract) returns (Transaction) {} Nodes: FullNode 5. Account name update Interface statement: rpc UpdateAccount (AccountUpdateContract) returns (Transaction) {} Nodes: Fullnode 6. Vote for super representative candidates Interface statement: rpc VoteWitnessAccount (VoteWitnessContract) returns (Transaction) {} Nodes: FullNode 7. Issue a token Interface statement: rpc CreateAssetIssue (AssetIssueContract) returns (Transaction) {} Nodes: FullNode 8. Query of list of super representative candidates Interface statement: rpc ListWitnesses (EmptyMessage) returns (WitnessList) {} Nodes: FullNode and SolidityNode 9. Application for super representative Interface statement: rpc CreateWitness (WitnessCreateContract) returns (Transaction) {} Nodes: FullNode Description: To apply to become TRON\u2019s Super Representative candidate. 10. Information update of Super Representative candidates Interface statement: rpc UpdateWitness (WitnessUpdateContract) returns (Transaction) {} Nodes: FullNode Description: Update the website url of the SR. 11. Token transfer Interface statement\u2028: rpc TransferAsset (TransferAssetContract) returns (Transaction){} Node: FullNode 12. Participate a token Interface statement: rpc ParticipateAssetIssue (ParticipateAssetIssueContract) returns (Transaction) {} Nodes: FullNode 13. Query the list of nodes connected to the ip of the api Interface statement: rpc ListNodes (EmptyMessage) returns (NodeList) {} Nodes: FullNode and SolidityNode 14. Query the list of all issued tokens Interface statement: rpc GetAssetIssueList (EmptyMessage) returns (AssetIssueList) {} Nodes: FullNode and SolidityNode 15. Query the token issued by a given account Interface statement: rpc GetAssetIssueByAccount (Account) returns (AssetIssueList) {} Nodes: FullNode and SolidityNode 16. Query the token information by token name Interface statement: rpc GetAssetIssueByName (BytesMessage) returns (AssetIssueContract) {} Nodes: FullNode and Soliditynode 17. Query the list of tokens by timestamp Interface statement: rpc GetAssetIssueListByTimestamp (NumberMessage) returns (AssetIssueList){} Nodes: SolidityNode 18. Get current block information Interface statement: rpc GetNowBlock (EmptyMessage) returns (Block) {} Nodes: FullNode and SolidityNode 19. Get a block by block height Interface statement: rpc GetBlockByNum (NumberMessage) returns (Block) {} Nodes: FullNode and SolidityNode 20. Get the total number of transactions Interface statement: rpc TotalTransaction (EmptyMessage) returns (NumberMessage) {} Nodes: FullNode and SolidityNode 21. Query the transaction by transaction id Interface statement: rpc getTransactionById (BytesMessage) returns (Transaction) {} Nodes: SolidityNode 22. Query the transaction by timestamp Interface statement: rpc getTransactionsByTimestamp (TimeMessage) returns (TransactionList) {} Nodes: SolidityNode 23. Query the transactions initiated by an account Interface statement: rpc getTransactionsFromThis (Account) returns (TransactionList) {} Nodes: SolidityNode 24. Query the transactions received by an account Interface statement: rpc getTransactionsToThis (Account) returns (NumberMessage) {} Nodes: SolidityNode 25. Freeze TRX Interface statement: rpc FreezeBalance (FreezeBalanceContract) returns (Transaction) {} Nodes: FullNode 26. Unfreeze TRX Interface statement: rpc UnfreezeBalance (UnfreezeBalanceContract) returns (Transaction) {} Nodes: FullNode 27. Block producing reward redemption Interface statement: rpc WithdrawBalance (WithdrawBalanceContract) returns (Transaction) {} Nodes: FullNode 28. Unfreeze token balance Interface statement: rpc UnfreezeAsset (UnfreezeAssetContract) returns (Transaction) {} Nodes: FullNode 29. Query the next maintenance time Interface statement: rpc GetNextMaintenanceTime (EmptyMessage) returns (NumberMessage) {} Nodes: FullNode 30. Query the transaction fee block information Interface statement: rpc GetTransactionInfoById (BytesMessage) returns (TransactionInfo) {} Nodes: SolidityNode 31. Query block information by block id Interface statement: rpc GetBlockById (BytesMessage) returns (Block) {} Nodes: FullNode 32. Update token information Interface statement: rpc UpdateAsset (UpdateAssetContract) returns (Transaction) {} Nodes: Fullnode Description: Token update can only be initiated by the token issuer to update token description, url, maximum bandwidth consumption by each account and total bandwidth consumption. 33. Query the list of all the tokens by pagination Interface statement: rpc GetPaginatedAssetIssueList (PaginatedMessage) returns (AssetIssueList) {} Nodes: FullNode and SolidityNode 34. To sign a transaction Interface statement: rpc GetTransactionSign (TransactionSign) returns (Transaction) {} Nodes: FullNode 35. Address and private key creation Interface statement: rpc CreateAdresss (BytesMessage) returns (BytesMessage) {} Nodes: Fullnode 36. TRX easy transfer Interface statement: rpc EasyTransfer (EasyTransferMessage) returns (EasyTransferResponse) {} Nodes: FullNode 37. Deploy a smart contract Interface statement: rpc DeployContract (CreateSmartContract) returns (TransactionExtention) {} Nodes: FullNode and SolidityNode 38. Trigger a smart contract Interface statement: rpc TriggerContract (TriggerSmartContract) returns (TransactionExtention) {} Nodes: FullNode 39. Create a shielded transaction Interface statement: rpc CreateShieldedTransaction (PrivateParameters) returns (TransactionExtention) {} Nodes: FullNode 40. Get a Merkle tree information of a note Interface statement: rpc GetMerkleTreeVoucherInfo (OutputPointInfo) returns (IncrementalMerkleVoucherInfo) {} Nodes: FullNode 41. Scan note by ivk Interface statement: rpc ScanNoteByIvk (IvkDecryptParameters) returns (DecryptNotes) {}; Nodes: FullNode 42. Scan note by ovk Interface statement: rpc ScanNoteByOvk (OvkDecryptParameters) returns (DecryptNotes) {}; Nodes: FullNode 43. Get spending key Interface statement: rpc GetSpendingKey (EmptyMessage) returns (BytesMessage) {} Nodes: FullNode 44. Get expanded spending key Interface statement: rpc GetExpandedSpendingKey (BytesMessage) returns (ExpandedSpendingKeyMessage) {} Nodes: FullNode 45. Get ak from ask Interface statement: rpc GetAkFromAsk (BytesMessage) returns (BytesMessage) {} Nodes: FullNode 46. Get nk from nsk Interface statement: rpc GetNkFromNsk (BytesMessage) returns (BytesMessage) {} Nodes: FullNode 47. Get incoming viewing key Interface statement: rpc GetIncomingViewingKey (ViewingKeyMessage) returns (IncomingViewingKeyMessage) {} Nodes: FullNode 48. Get diversifier Interface statement: rpc GetDiversifier (EmptyMessage) returns (DiversifierMessage) {} Nodes: FullNode 49. Get zen payment address Interface statement: rpc GetZenPaymentAddress (IncomingViewingKeyDiversifierMessage) returns (PaymentAddressMessage) {} Nodes: FullNode 50. Get rcm Interface statement: rpc GetRcm (EmptyMessage) returns (BytesMessage) {} Nodes: FullNode 51. Get a note status of is spent or not Interface statement: rpc IsSpend (NoteParameters) returns (SpendResult) {} Nodes: FullNode 52. Create a shielded transaction without using ask Interface statement: rpc CreateShieldedTransactionWithoutSpendAuthSig (PrivateParametersWithoutAsk) returns (TransactionExtention) {}; Nodes: FullNode 53. Create a shielded transaction hash Interface statement: rpc GetShieldTransactionHash (Transaction) returns (BytesMessage) {}; Nodes: FullNode 54. Create a signature for a shielded transaction Interface statement: rpc CreateSpendAuthSig (SpendAuthSigParameters) returns (BytesMessage) {}; Nodes: FullNode 56. Create a shield nullifier Interface statement: rpc CreateShieldNullifier (NfParameters) returns (BytesMessage) {}; Nodes: FullNode","title":"TRON RPC Api"},{"location":"Tron-shielded-transaction/","text":"Simple Summary This doc describes how to use TRON Shielded Transaction api. 1. Transfer from transparent address to shielded address Step 1. Call api: wallet/createshieldedtransaction to build the transaction Method: Post Parameters: { transparent_from_address : 41A7D8A35B260395C14AA456297662092BA3B76FC0 , from_amount :100000000, ovk : 798ba79bfec55e154fa69b4e6a96247288f727b5e4ecc5cd848aefc0afab02b6 , shieldedReceives :[{ note : { value : 500000000, payment_address : ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02 , rcm : 723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e } }] } Return: { txID : 1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497 , raw_data :{ contract :[{ parameter :{ value :{ transparent_from_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , binding_signature : 5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a , from_amount :100000000, fee :10000000, receive_description :[{ value_commitment : 5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21 , note_commitment : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 , epk : e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b , c_enc : d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae , c_out : 8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a , zkproof : 8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607 }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 0245 , ref_block_hash : b1ea272768028540 , expiration :1558691289000, timestamp :1558691230861}, raw_data_hex : 0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d } Step 2. Call api: wallet/gettransactionsign to sign (use the private key of the transparent address) Method: Post Parameters: { privateKey : 7f7f701e94d4f1dd60ee5205e7ea8ee31121427210417b608a6b2e96433549a7 , transaction : { txID : 1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497 , raw_data :{ contract :[{ parameter :{ value :{ transparent_from_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , binding_signature : 5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a , from_amount :100000000, fee :10000000, receive_description :[{ value_commitment : 5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21 , note_commitment : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 , epk : e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b , c_enc : d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae , c_out : 8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a , zkproof : 8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607 }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 0245 , ref_block_hash : b1ea272768028540 , expiration :1558691289000, timestamp :1558691230861}, raw_data_hex : 0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d } } Return: { signature :[ 5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00 ], txID : 1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497 , raw_data :{ contract :[{ parameter :{ value :{ transparent_from_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , binding_signature : 5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a , from_amount :100000000, fee :10000000, receive_description :[{ value_commitment : 5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21 , note_commitment : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 , epk : e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b , c_enc : d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae , c_out : 8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a , zkproof : 8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607 }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 0245 , ref_block_hash : b1ea272768028540 , expiration :1558691289000, timestamp :1558691230861}, raw_data_hex : 0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d } Step 3. Call api: wallet/broadcasttransaction to broadcast the transaction Method: Post Parameters: { signature :[ 5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00 ], txID : 1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497 , raw_data :{ contract :[{ parameter :{ value :{ transparent_from_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , binding_signature : 5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a , from_amount :100000000, fee :10000000, receive_description :[{ value_commitment : 5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21 , note_commitment : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 , epk : e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b , c_enc : d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae , c_out : 8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a , zkproof : 8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607 }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 0245 , ref_block_hash : b1ea272768028540 , expiration :1558691289000, timestamp :1558691230861}, raw_data_hex : 0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d } Return: { result : true} 2. Transfer from shielded address to shielded address Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { out_points :[{ hash : 1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497 , index :0 }], block_num :1 } Return: { vouchers : [{ tree : { left : { content : 7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35 }, right : { content : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 }}, rt : 72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e }], paths : [ 2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000 ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { ask : f9302122162221f59a7668e0d740245dcabaeb51dd157ba995eecd02f4b60b06 , nsk : 050fc9a42909e60fefb9d548fe12718cb759e3ee28d1b92ceaeaffc23d200a0d , ovk : a0da0cc6294dc900e93887b9f08ac42a162234359fdaf523b98382602c92513c , shieldedSpends : [ { note : { value : 90000000, payment_address : ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02 , rcm : e48836a3cfae0e1b27b5230460199b46ebd88ad650fa9db5ac1eafb20b516302 }, alpha : 2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04 , voucher : { tree : { left : { content : 7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35 }, right : { content : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 }}, rt : 72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e }, path : 2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000 } ], shieldedReceives : [ { note : { value : 80000000, payment_address : ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr , rcm : ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03 } } ] } Return: { txID : 5a057fde4a1add0da38eda9978f6c3d035f7ca4807adae4b8c57e34499dfedfb , raw_data :{ contract :[{ parameter :{ value :{ binding_signature : b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c , spend_description :[{ value_commitment : ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529 , anchor : 72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e , nullifier : 29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c , rk : c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463 , spend_authority_signature : 518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b08 , zkproof : 82eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad }], fee :10000000, receive_description :[{ value_commitment : 6b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b925 , note_commitment : e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02 , epk : 36b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f758 , c_enc : 1f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d56653 , c_out : bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a0 , zkproof : b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb409956 }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 029b , ref_block_hash : 027c45a7dc0875f7 , expiration :1558691547000, timestamp :1558691489292}, raw_data_hex : 0a02029b2208027c45a7dc0875f740f88e86caae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac00182eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad3240518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b0822c2070a206b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b9251220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a2036b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f75822c4041f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d566532a50bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a032c001b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb4099562a40b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c4080ade204708ccc82caae2d } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { txID : 791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c , raw_data :{ contract :[{ parameter :{ value :{ binding_signature : 231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d7504 , spend_description :[{ value_commitment : f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140 , anchor : 72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e , nullifier : 29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c , rk : c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463 , spend_authority_signature : 2f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c08 , zkproof : 984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b }], fee :10000000, receive_description :[{ value_commitment : 3f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd3595 , note_commitment : e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02 , epk : 3ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c , c_enc : 4fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df040 , c_out : 5fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e , zkproof : b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 0328 , ref_block_hash : 833c24d9f1019cd0 , expiration :1558691970000, timestamp :1558691911355}, raw_data_hex : 0a0203282208833c24d9f1019cd040d0f79fcaae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac001984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b32402f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c0822c2070a203f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd35951220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a203ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c22c4044fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df0402a505fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e32c001b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b2a40231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d75044080ade20470bbad9ccaae2d } Return: { result : true} 3. Transfer from shielded address to transparent address Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { out_points :[{ hash : 791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c , index :0 }], block_num :1 } Return: { vouchers : [{ tree : { left : { content : e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02 }, parents : [{ content : c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf61 }]}, rt : 8bdf96ac1241f30d5cd54d4ece7f10867d9eef854121ef77d1015f0ab2a26b1b }], paths : [ 2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf612001000000000000000000000000000000000000000000000000000000000000000200000000000000 ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { ask : 653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604 , nsk : 428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01 , ovk : 1274dcc5c7307bf0fd0ead466e9dd5641fed4a51391f681862370e2f2654cc61 , shieldedSpends : [ { note : { value : 80000000, payment_address : ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr , rcm : ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03 }, alpha : 3ad5406efd6efcd81d27696d5f91efc07ba5c98ea6fb0f787b93e557b51df405 , voucher : { tree : { left : { content : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 }, right : { content : e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02 } }, rt : 774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567 }, path : 2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15520f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b620100000000000000 } ], transparent_to_address : 41A7D8A35B260395C14AA456297662092BA3B76FC0 , to_amount : 70000000 } Return: { txID : 4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866 , raw_data :{ contract :[{ parameter :{ value :{ to_amount :70000000, binding_signature : 780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203 , spend_description :[{ value_commitment : 086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9 , anchor : 774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567 , nullifier : fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587 , rk : 41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4 , spend_authority_signature : b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207 , zkproof : b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1 }], fee :10000000, transparent_to_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 }, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 00dc , ref_block_hash : a45c748f93fa2854 , expiration :1558928754000, timestamp :1558928695327}, raw_data_hex : 0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { txID : 4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866 , raw_data :{ contract :[{ parameter :{ value :{ to_amount :70000000, binding_signature : 780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203 , spend_description :[{ value_commitment : 086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9 , anchor : 774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567 , nullifier : fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587 , rk : 41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4 , spend_authority_signature : b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207 , zkproof : b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1 }], fee :10000000, transparent_to_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 }, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 00dc , ref_block_hash : a45c748f93fa2854 , expiration :1558928754000, timestamp :1558928695327}, raw_data_hex : 0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d } Return: { result : true}","title":"TRON Shielded Transaction"},{"location":"Tron-shielded-transaction/#simple-summary","text":"This doc describes how to use TRON Shielded Transaction api.","title":"Simple Summary"},{"location":"Tron-shielded-transaction/#1-transfer-from-transparent-address-to-shielded-address","text":"Step 1. Call api: wallet/createshieldedtransaction to build the transaction Method: Post Parameters: { transparent_from_address : 41A7D8A35B260395C14AA456297662092BA3B76FC0 , from_amount :100000000, ovk : 798ba79bfec55e154fa69b4e6a96247288f727b5e4ecc5cd848aefc0afab02b6 , shieldedReceives :[{ note : { value : 500000000, payment_address : ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02 , rcm : 723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e } }] } Return: { txID : 1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497 , raw_data :{ contract :[{ parameter :{ value :{ transparent_from_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , binding_signature : 5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a , from_amount :100000000, fee :10000000, receive_description :[{ value_commitment : 5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21 , note_commitment : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 , epk : e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b , c_enc : d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae , c_out : 8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a , zkproof : 8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607 }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 0245 , ref_block_hash : b1ea272768028540 , expiration :1558691289000, timestamp :1558691230861}, raw_data_hex : 0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d } Step 2. Call api: wallet/gettransactionsign to sign (use the private key of the transparent address) Method: Post Parameters: { privateKey : 7f7f701e94d4f1dd60ee5205e7ea8ee31121427210417b608a6b2e96433549a7 , transaction : { txID : 1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497 , raw_data :{ contract :[{ parameter :{ value :{ transparent_from_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , binding_signature : 5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a , from_amount :100000000, fee :10000000, receive_description :[{ value_commitment : 5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21 , note_commitment : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 , epk : e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b , c_enc : d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae , c_out : 8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a , zkproof : 8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607 }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 0245 , ref_block_hash : b1ea272768028540 , expiration :1558691289000, timestamp :1558691230861}, raw_data_hex : 0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d } } Return: { signature :[ 5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00 ], txID : 1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497 , raw_data :{ contract :[{ parameter :{ value :{ transparent_from_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , binding_signature : 5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a , from_amount :100000000, fee :10000000, receive_description :[{ value_commitment : 5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21 , note_commitment : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 , epk : e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b , c_enc : d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae , c_out : 8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a , zkproof : 8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607 }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 0245 , ref_block_hash : b1ea272768028540 , expiration :1558691289000, timestamp :1558691230861}, raw_data_hex : 0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d } Step 3. Call api: wallet/broadcasttransaction to broadcast the transaction Method: Post Parameters: { signature :[ 5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00 ], txID : 1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497 , raw_data :{ contract :[{ parameter :{ value :{ transparent_from_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 , binding_signature : 5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a , from_amount :100000000, fee :10000000, receive_description :[{ value_commitment : 5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21 , note_commitment : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 , epk : e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b , c_enc : d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae , c_out : 8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a , zkproof : 8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607 }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 0245 , ref_block_hash : b1ea272768028540 , expiration :1558691289000, timestamp :1558691230861}, raw_data_hex : 0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d } Return: { result : true}","title":"1. Transfer from transparent address to shielded address"},{"location":"Tron-shielded-transaction/#2-transfer-from-shielded-address-to-shielded-address","text":"Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { out_points :[{ hash : 1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497 , index :0 }], block_num :1 } Return: { vouchers : [{ tree : { left : { content : 7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35 }, right : { content : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 }}, rt : 72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e }], paths : [ 2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000 ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { ask : f9302122162221f59a7668e0d740245dcabaeb51dd157ba995eecd02f4b60b06 , nsk : 050fc9a42909e60fefb9d548fe12718cb759e3ee28d1b92ceaeaffc23d200a0d , ovk : a0da0cc6294dc900e93887b9f08ac42a162234359fdaf523b98382602c92513c , shieldedSpends : [ { note : { value : 90000000, payment_address : ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02 , rcm : e48836a3cfae0e1b27b5230460199b46ebd88ad650fa9db5ac1eafb20b516302 }, alpha : 2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04 , voucher : { tree : { left : { content : 7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35 }, right : { content : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 }}, rt : 72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e }, path : 2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000 } ], shieldedReceives : [ { note : { value : 80000000, payment_address : ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr , rcm : ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03 } } ] } Return: { txID : 5a057fde4a1add0da38eda9978f6c3d035f7ca4807adae4b8c57e34499dfedfb , raw_data :{ contract :[{ parameter :{ value :{ binding_signature : b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c , spend_description :[{ value_commitment : ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529 , anchor : 72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e , nullifier : 29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c , rk : c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463 , spend_authority_signature : 518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b08 , zkproof : 82eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad }], fee :10000000, receive_description :[{ value_commitment : 6b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b925 , note_commitment : e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02 , epk : 36b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f758 , c_enc : 1f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d56653 , c_out : bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a0 , zkproof : b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb409956 }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 029b , ref_block_hash : 027c45a7dc0875f7 , expiration :1558691547000, timestamp :1558691489292}, raw_data_hex : 0a02029b2208027c45a7dc0875f740f88e86caae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac00182eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad3240518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b0822c2070a206b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b9251220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a2036b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f75822c4041f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d566532a50bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a032c001b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb4099562a40b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c4080ade204708ccc82caae2d } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { txID : 791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c , raw_data :{ contract :[{ parameter :{ value :{ binding_signature : 231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d7504 , spend_description :[{ value_commitment : f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140 , anchor : 72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e , nullifier : 29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c , rk : c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463 , spend_authority_signature : 2f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c08 , zkproof : 984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b }], fee :10000000, receive_description :[{ value_commitment : 3f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd3595 , note_commitment : e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02 , epk : 3ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c , c_enc : 4fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df040 , c_out : 5fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e , zkproof : b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b }]}, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 0328 , ref_block_hash : 833c24d9f1019cd0 , expiration :1558691970000, timestamp :1558691911355}, raw_data_hex : 0a0203282208833c24d9f1019cd040d0f79fcaae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac001984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b32402f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c0822c2070a203f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd35951220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a203ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c22c4044fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df0402a505fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e32c001b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b2a40231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d75044080ade20470bbad9ccaae2d } Return: { result : true}","title":"2. Transfer from shielded address to shielded address"},{"location":"Tron-shielded-transaction/#3-transfer-from-shielded-address-to-transparent-address","text":"Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { out_points :[{ hash : 791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c , index :0 }], block_num :1 } Return: { vouchers : [{ tree : { left : { content : e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02 }, parents : [{ content : c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf61 }]}, rt : 8bdf96ac1241f30d5cd54d4ece7f10867d9eef854121ef77d1015f0ab2a26b1b }], paths : [ 2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf612001000000000000000000000000000000000000000000000000000000000000000200000000000000 ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { ask : 653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604 , nsk : 428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01 , ovk : 1274dcc5c7307bf0fd0ead466e9dd5641fed4a51391f681862370e2f2654cc61 , shieldedSpends : [ { note : { value : 80000000, payment_address : ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr , rcm : ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03 }, alpha : 3ad5406efd6efcd81d27696d5f91efc07ba5c98ea6fb0f787b93e557b51df405 , voucher : { tree : { left : { content : f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62 }, right : { content : e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02 } }, rt : 774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567 }, path : 2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15520f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b620100000000000000 } ], transparent_to_address : 41A7D8A35B260395C14AA456297662092BA3B76FC0 , to_amount : 70000000 } Return: { txID : 4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866 , raw_data :{ contract :[{ parameter :{ value :{ to_amount :70000000, binding_signature : 780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203 , spend_description :[{ value_commitment : 086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9 , anchor : 774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567 , nullifier : fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587 , rk : 41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4 , spend_authority_signature : b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207 , zkproof : b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1 }], fee :10000000, transparent_to_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 }, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 00dc , ref_block_hash : a45c748f93fa2854 , expiration :1558928754000, timestamp :1558928695327}, raw_data_hex : 0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { txID : 4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866 , raw_data :{ contract :[{ parameter :{ value :{ to_amount :70000000, binding_signature : 780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203 , spend_description :[{ value_commitment : 086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9 , anchor : 774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567 , nullifier : fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587 , rk : 41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4 , spend_authority_signature : b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207 , zkproof : b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1 }], fee :10000000, transparent_to_address : 41a7d8a35b260395c14aa456297662092ba3b76fc0 }, type_url : type.googleapis.com/protocol.ShieldedTransferContract }, type : ShieldedTransferContract }], ref_block_bytes : 00dc , ref_block_hash : a45c748f93fa2854 , expiration :1558928754000, timestamp :1558928695327}, raw_data_hex : 0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d } Return: { result : true}","title":"3. Transfer from shielded address to transparent address"},{"location":"advanced-configuration/","text":"Advanced Configurations we provide some configuration items for LevelDB and gRPC in config.conf file, for fine-grained performance tuning. You may custom these items only if you have deep understanding on them, otherwise keep them as default. LevelDB You can custom LevelDB options in the storage part of config.conf , which looks like: storage { # Directory for storing persistent data db.directory = database , index.directory = index , # You can custom these 14 databases' configs: # account, account-index, asset-issue, block, block-index, # block_KDB, peers, properties, recent-block, trans, # utxo, votes, witness, witness_schedule. # Otherwise, db configs will remain defualt and data will be stored in # the path of output-directory or which is set by -d ( --output-directory ). # Attention: name is a required field that must be set !!! properties = [ { name = account , path = /path/to/accout , // relative or absolute path createIfMissing = true, paranoidChecks = true, verifyChecksums = true, compressionType = 1, // 0 - no compression, 1 - compressed with snappy blockSize = 4096, // 4 KB = 4 * 1024 B writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B cacheSize = 10485760, // 10 MB = 10 * 1024 * 1024 B maxOpenFiles = 100 } ] } As shown in the example above, the data of database accout will be stored in the path of /path/to/accout/database while the index be stored in /path/to/accout/index . And, the example also shows our default value of LevelDB options from createIfMissing to maxOpenFiles . You can just refer to the docs of LevelDB to figure out details of these options. gRPC You can custom gPRC options in the node.rpc part of config.conf , which looks like: node { rpc { port = 50051 # Number of gRPC thread, default availableProcessors / 2 # thread = 16 # The maximum number of concurrent calls permitted for each incoming connection # maxConcurrentCallsPerConnection = # The HTTP/2 flow control window, default 1MB # flowControlWindow = # Connection being idle for longer than which will be gracefully terminated maxConnectionIdleInMillis = 60000 # Connection lasting longer than which will be gracefully terminated # maxConnectionAgeInMillis = # The maximum message size allowed to be received on the server, default 4MB # maxMessageSize = # The maximum size of header list allowed to be received, default 8192 # maxHeaderListSize = } } backup You can custom backup options in the node.backup part of config.conf , which looks like: node.backup { # my priority, each member should use different priority priority = # members should use same port port = # peer's ip list, can't contain mine members = [] } policy: 1. the one which synchronized first will become master. 2. if synchronization is completed at the same time, the one which with big priority will become master. E.g. create backups for node A(192.168.0.100) and node B(192.168.0.100 ): node A's configuration: node.backup { priority = 8 port = 10001 members = [ 192.168.0.101 ] } node B's configuration: node.backup { priority = 5 port = 10001 members = [ 192.168.0.100 ] } You may refer to the source code of io.grpc.netty.NettyServerBuilder class to see details or just make a decision according to the brief comments above.","title":"Advanced Configurations"},{"location":"advanced-configuration/#advanced-configurations","text":"we provide some configuration items for LevelDB and gRPC in config.conf file, for fine-grained performance tuning. You may custom these items only if you have deep understanding on them, otherwise keep them as default.","title":"Advanced Configurations"},{"location":"advanced-configuration/#leveldb","text":"You can custom LevelDB options in the storage part of config.conf , which looks like: storage { # Directory for storing persistent data db.directory = database , index.directory = index , # You can custom these 14 databases' configs: # account, account-index, asset-issue, block, block-index, # block_KDB, peers, properties, recent-block, trans, # utxo, votes, witness, witness_schedule. # Otherwise, db configs will remain defualt and data will be stored in # the path of output-directory or which is set by -d ( --output-directory ). # Attention: name is a required field that must be set !!! properties = [ { name = account , path = /path/to/accout , // relative or absolute path createIfMissing = true, paranoidChecks = true, verifyChecksums = true, compressionType = 1, // 0 - no compression, 1 - compressed with snappy blockSize = 4096, // 4 KB = 4 * 1024 B writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B cacheSize = 10485760, // 10 MB = 10 * 1024 * 1024 B maxOpenFiles = 100 } ] } As shown in the example above, the data of database accout will be stored in the path of /path/to/accout/database while the index be stored in /path/to/accout/index . And, the example also shows our default value of LevelDB options from createIfMissing to maxOpenFiles . You can just refer to the docs of LevelDB to figure out details of these options.","title":"LevelDB"},{"location":"advanced-configuration/#grpc","text":"You can custom gPRC options in the node.rpc part of config.conf , which looks like: node { rpc { port = 50051 # Number of gRPC thread, default availableProcessors / 2 # thread = 16 # The maximum number of concurrent calls permitted for each incoming connection # maxConcurrentCallsPerConnection = # The HTTP/2 flow control window, default 1MB # flowControlWindow = # Connection being idle for longer than which will be gracefully terminated maxConnectionIdleInMillis = 60000 # Connection lasting longer than which will be gracefully terminated # maxConnectionAgeInMillis = # The maximum message size allowed to be received on the server, default 4MB # maxMessageSize = # The maximum size of header list allowed to be received, default 8192 # maxHeaderListSize = } }","title":"gRPC"},{"location":"advanced-configuration/#backup","text":"You can custom backup options in the node.backup part of config.conf , which looks like: node.backup { # my priority, each member should use different priority priority = # members should use same port port = # peer's ip list, can't contain mine members = [] } policy: 1. the one which synchronized first will become master. 2. if synchronization is completed at the same time, the one which with big priority will become master. E.g. create backups for node A(192.168.0.100) and node B(192.168.0.100 ): node A's configuration: node.backup { priority = 8 port = 10001 members = [ 192.168.0.101 ] } node B's configuration: node.backup { priority = 5 port = 10001 members = [ 192.168.0.100 ] } You may refer to the source code of io.grpc.netty.NettyServerBuilder class to see details or just make a decision according to the brief comments above.","title":"backup"},{"location":"official-public-nodes/","text":"FullNodes GRPC port: 50051 P2P network port: 18888 HTTP port : 8090 54.236.37.243 52.53.189.99 18.196.99.16 34.253.187.192 52.56.56.149 35.180.51.163 54.252.224.209 18.228.15.36 52.15.93.92 34.220.77.106 13.127.47.162 13.124.62.58 47.74.149.206 47.90.240.187 47.90.215.84 47.254.77.146 47.74.242.55 47.75.249.119 47.90.201.118 47.74.21.68 47.74.13.168 47.74.33.41 47.52.59.134 47.74.229.70 47.254.27.69 47.89.243.195 47.90.201.112 47.88.174.175 47.74.224.123 47.75.249.4 SolidityNodes GRPC port: 50051 HTTP port : 8091 47.89.187.247 47.91.18.255 47.75.10.71 47.251.52.228 47.251.48.82 47.74.147.80 34.234.164.105 18.221.34.0 35.178.11.0 35.180.18.107","title":"TRON Official Public Nodes"},{"location":"official-public-nodes/#fullnodes","text":"GRPC port: 50051 P2P network port: 18888 HTTP port : 8090 54.236.37.243 52.53.189.99 18.196.99.16 34.253.187.192 52.56.56.149 35.180.51.163 54.252.224.209 18.228.15.36 52.15.93.92 34.220.77.106 13.127.47.162 13.124.62.58 47.74.149.206 47.90.240.187 47.90.215.84 47.254.77.146 47.74.242.55 47.75.249.119 47.90.201.118 47.74.21.68 47.74.13.168 47.74.33.41 47.52.59.134 47.74.229.70 47.254.27.69 47.89.243.195 47.90.201.112 47.88.174.175 47.74.224.123 47.75.249.4","title":"FullNodes"},{"location":"official-public-nodes/#soliditynodes","text":"GRPC port: 50051 HTTP port : 8091 47.89.187.247 47.91.18.255 47.75.10.71 47.251.52.228 47.251.48.82 47.74.147.80 34.234.164.105 18.221.34.0 35.178.11.0 35.180.18.107","title":"SolidityNodes"},{"location":"resources/","text":"TRON Official Website https://tron.network/ TRON White Paper https://tron.network/resources?lng= name=1 TRON Blockchain Browser https://tronscan.org/ https://www.trxplorer.io/ TRON Wallet https://github.com/tronprotocol/wallet-cli","title":"TRON Resources"}]}